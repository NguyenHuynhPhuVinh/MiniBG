"use client";

import React, { useEffect, useState, useMemo } from "react";
import { useParams, useRouter } from "next/navigation";
import {
  ParticipantList,
  QuizPinDisplay,
} from "@/components/features/quiz/waiting-room";
import { useQuizRealtime } from "@/lib/hooks/use-quiz-realtime";
import { useAuthStatus } from "@/lib/hooks/use-auth";
import quizService from "@/lib/services";
import { Quiz } from "@/lib/types/quiz";
import { HelpCircle, X, Loader2, Zap, Trophy } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/forms";
import { hasRole } from "@/lib/auth/role-manager";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/feedback";

// Racing-themed wrapper components
const RacingQuizPinDisplay = ({
  pin,
  quizName,
  onStartQuiz,
  disabled,
}: any) => {
  return (
    <div className="relative">
      {/* Racing gradient background */}
      <div className="absolute inset-0 bg-gradient-to-r from-red-500 via-orange-500 to-yellow-500 rounded-lg opacity-10"></div>
      <div className="relative">
        <QuizPinDisplay
          pin={pin}
          quizName={quizName}
          onStartQuiz={onStartQuiz}
          disabled={disabled}
        />
      </div>
      {/* Racing icons */}
      <div className="absolute top-4 right-4 flex space-x-2">
        <Zap className="h-6 w-6 text-yellow-500 animate-pulse" />
        <Trophy className="h-6 w-6 text-orange-500" />
      </div>
    </div>
  );
};

const RacingParticipantList = ({ participants }: any) => {
  return (
    <div className="relative">
      {/* Racing theme styling */}
      <div className="absolute inset-0 bg-gradient-to-b from-blue-50 to-purple-50 rounded-lg opacity-50"></div>
      <div className="relative">
        <ParticipantList participants={participants} />
      </div>
    </div>
  );
};

const QuizRacingWaitingRoomPage = () => {
  const router = useRouter();
  const { id } = useParams();
  const quizId = parseInt(id as string, 10);
  const { isAuthenticated } = useAuthStatus();
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [loading, setLoading] = useState(true);
  const [showLeaveDialog, setShowLeaveDialog] = useState(false);

  // X√°c ƒë·ªãnh ng∆∞·ªùi d√πng l√† gi√°o vi√™n hay h·ªçc sinh
  const isTeacher = isAuthenticated() && hasRole(["teacher", "Teacher"]);

  // S·ª≠ d·ª•ng hook realtime ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi tham gia
  const {
    participants: realtimeParticipants,
    isConnected,
    error,
    joinWaitingRoom,
    reloadParticipants,
    quizStarted,
  } = useQuizRealtime(quizId, isTeacher);

  // K·∫øt h·ª£p danh s√°ch ng∆∞·ªùi tham gia
  const participants = useMemo(() => {
    return realtimeParticipants;
  }, [realtimeParticipants]);

  // X·ª≠ l√Ω khi quiz b·∫Øt ƒë·∫ßu - Racing navigation
  useEffect(() => {
    if (quizStarted) {
      console.log("Quiz Racing ƒë√£ b·∫Øt ƒë·∫ßu, ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng");

      if (!isTeacher) {
        // H·ªçc sinh chuy·ªÉn ƒë·∫øn trang racing live
        toast.success("üèÅ Quiz Racing ƒë√£ b·∫Øt ƒë·∫ßu! S·∫µn s√†ng ƒëua!");
        router.push(`/quiz-racing-live/${quizId}`);
      } else {
        // Gi√°o vi√™n chuy·ªÉn ƒë·∫øn trang theo d√µi
        toast.success(
          "üèÅ Quiz Racing ƒë√£ b·∫Øt ƒë·∫ßu! Chuy·ªÉn ƒë·∫øn trang theo d√µi..."
        );
        router.push(`/quiz-monitor/${quizId}`);
      }
    }
  }, [quizStarted, quizId, router, isTeacher]);

  // Th√™m useEffect ƒë·ªÉ g·ªçi reload participants khi c·∫ßn
  useEffect(() => {
    if (isTeacher && quizId && isConnected) {
      reloadParticipants();
    }
  }, [isTeacher, quizId, isConnected, reloadParticipants]);

  // L·∫•y th√¥ng tin quiz
  useEffect(() => {
    const fetchQuiz = async () => {
      try {
        setLoading(true);
        const response = await quizService.getQuizById(quizId);
        console.log("Quiz Racing Waiting Room API Response:", response); // Debug log

        if (response?.success && response?.data) {
          setQuiz(response.data.quiz);
        } else {
          console.warn(
            "Unexpected quiz racing waiting room response structure:",
            response
          );
          throw new Error("Invalid response structure");
        }

        // N·∫øu quiz ƒë√£ active, ch·ªâ h·ªçc sinh chuy·ªÉn h∆∞·ªõng sang trang quiz-racing-live
        if (response?.data?.quiz?.status === "active" && !isTeacher) {
          // Ki·ªÉm tra xem ƒë√£ tham gia quiz ch∆∞a
          try {
            // G·ªçi API ƒë·ªÉ tham gia l·∫°i quiz n·∫øu c·∫ßn
            const joinResponse = await quizService.joinQuiz(quizId, {
              pin: response.quiz.pin || "",
            });

            // N·∫øu c√≥ th√¥ng tin v·ªÅ ti·∫øn ƒë·ªô l√†m b√†i, chuy·ªÉn h∆∞·ªõng t·ªõi quiz-racing-live
            if (joinResponse.session && joinResponse.progress) {
              toast.success(
                "üèÅ Quiz Racing ƒëang di·ªÖn ra, ƒëang chuy·ªÉn ƒë·∫øn b√†i ƒëua..."
              );
            }

            router.push(`/quiz-racing-live/${quizId}`);
          } catch (joinError) {
            console.error("L·ªói khi tham gia l·∫°i quiz racing:", joinError);
            // V·∫´n chuy·ªÉn h∆∞·ªõng n·∫øu quiz ƒëang active
            router.push(`/quiz-racing-live/${quizId}`);
          }
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin quiz racing:", error);
      } finally {
        setLoading(false);
      }
    };

    if (quizId && !isNaN(quizId)) {
      fetchQuiz();
    } else {
      toast.error("ID b√†i ki·ªÉm tra kh√¥ng h·ª£p l·ªá");
      setLoading(false);
    }
  }, [quizId, isTeacher, id, router]);

  // Th√™m useEffect ƒë·ªÉ g·ªçi joinWaitingRoom khi socket ƒë√£ k·∫øt n·ªëi
  useEffect(() => {
    if (isConnected) {
      console.log("Socket ƒë√£ k·∫øt n·ªëi, g·ªçi joinWaitingRoom() cho Quiz Racing");
      joinWaitingRoom();
    }
  }, [isConnected, joinWaitingRoom]);

  // X·ª≠ l√Ω b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra (ch·ªâ d√†nh cho gi√°o vi√™n)
  const handleStartQuiz = async () => {
    try {
      // B·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra racing
      await quizService.startQuiz(quizId);
    } catch (err) {
      toast.error("Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu Quiz Racing");
      console.error(err);
    }
  };

  const handleBackToDashboard = async () => {
    if (!isTeacher) {
      // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n cho h·ªçc sinh
      setShowLeaveDialog(true);
    } else {
      // Gi√°o vi√™n kh√¥ng c·∫ßn x√°c nh·∫≠n, chuy·ªÉn h∆∞·ªõng ngay
      router.push("/dashboard");
    }
  };

  const handleLeaveRoom = async () => {
    try {
      // G·ªçi API r·ªùi ph√≤ng
      await quizService.leaveQuiz(quizId);
      toast.success("B·∫°n ƒë√£ r·ªùi kh·ªèi ph√≤ng ch·ªù Quiz Racing");
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ dashboard
      router.push("/dashboard");
    } catch (error) {
      console.error("L·ªói khi r·ªùi ph√≤ng racing:", error);
      toast.error("Kh√¥ng th·ªÉ r·ªùi ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
        <div className="text-center">
          <Loader2 className="h-6 w-6 sm:h-8 sm:w-8 animate-spin text-orange-500 mx-auto" />
          <span className="mt-4 text-base sm:text-lg text-orange-700">
            üèÅ ƒêang t·∫£i ph√≤ng ch·ªù Quiz Racing...
          </span>
        </div>
      </div>
    );
  }

  if (!quiz) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
        <div className="text-center">
          <HelpCircle className="h-12 w-12 text-muted-foreground mx-auto" />
          <h2 className="mt-4 text-xl font-bold">Kh√¥ng t√¨m th·∫•y Quiz Racing</h2>
          <p className="mt-2 text-muted-foreground">
            Quiz Racing kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="relative h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
      {/* Dialog x√°c nh·∫≠n r·ªùi ph√≤ng */}
      <Dialog open={showLeaveDialog} onOpenChange={setShowLeaveDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              üèÅ B·∫°n mu·ªën r·ªùi kh·ªèi ph√≤ng ch·ªù Quiz Racing?
            </DialogTitle>
            <DialogDescription>
              N·∫øu b·∫°n r·ªùi kh·ªèi ph√≤ng ch·ªù, b·∫°n s·∫Ω kh√¥ng th·ªÉ tham gia cu·ªôc ƒëua n√†y
              khi n√≥ b·∫Øt ƒë·∫ßu.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowLeaveDialog(false)}
              className="cursor-pointer"
            >
              H·ªßy
            </Button>
            <Button
              variant="destructive"
              onClick={handleLeaveRoom}
              className="cursor-pointer"
            >
              R·ªùi ph√≤ng
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* N√∫t tho√°t v·ªõi racing theme */}
      <div className="absolute top-6 right-6 z-20">
        <div className="relative flex items-center justify-center">
          <Button
            variant="outline"
            size="icon"
            onClick={handleBackToDashboard}
            className="rounded-full h-12 w-12 border-2 border-orange-200 hover:bg-red-500 hover:text-white hover:border-red-500 transition-all cursor-pointer bg-white/80 backdrop-blur-sm"
            aria-label={isTeacher ? "Quay l·∫°i" : "R·ªùi ph√≤ng"}
            title={
              isTeacher ? "Quay l·∫°i trang ch·ªß" : "R·ªùi kh·ªèi ph√≤ng ch·ªù Racing"
            }
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
      </div>

      <div className="container max-w-6xl mx-auto py-6 sm:py-10 md:py-16 px-4">
        {/* Racing-themed header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-red-600 via-orange-600 to-yellow-600 bg-clip-text text-transparent">
            üèÅ Quiz Racing - Ph√≤ng Ch·ªù
          </h1>
          <p className="text-lg text-gray-600 mt-2">
            S·∫µn s√†ng cho cu·ªôc ƒëua tri th·ª©c!
          </p>
        </div>

        <RacingQuizPinDisplay
          pin={quiz.pin || "Kh√¥ng c√≥ m√£ PIN"}
          quizName={quiz.name}
          onStartQuiz={handleStartQuiz}
          disabled={quiz.status !== "pending" || participants.length === 0}
        />

        <RacingParticipantList participants={participants} />

        {error && (
          <div className="mt-4 p-3 sm:p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm sm:text-base">
            üö® L·ªói k·∫øt n·ªëi: {error}
          </div>
        )}

        {!isConnected && !error && (
          <div className="mt-4 p-3 sm:p-4 bg-orange-100 border border-orange-300 text-orange-800 rounded-md text-sm sm:text-base">
            üîÑ ƒêang k·∫øt n·ªëi v·ªõi m√°y ch·ªß Racing...
          </div>
        )}
      </div>
    </div>
  );
};

export default QuizRacingWaitingRoomPage;

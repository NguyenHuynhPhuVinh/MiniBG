"use client";

import React, { useState, useEffect } from "react";
import { EventBus } from "../../../../phaser/EventBus";
import {
  Trees,
  Mountain,
  Gamepad2,
  Lightbulb,
  Play,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";

/**
 * üéÆ SCENE LOADING OVERLAY - Full screen overlay hi·ªÉn th·ªã khi scene ƒëang preload
 *
 * CH·ª®C NƒÇNG:
 * - Full screen overlay v·ªõi loading animation
 * - Hi·ªÉn th·ªã scene n√†o ƒëang load c·ª• th·ªÉ
 * - Progress bar cho qu√° tr√¨nh loading
 * - Tips v√† th√¥ng tin v·ªÅ scene
 * - Auto hide khi loading ho√†n th√†nh
 */

interface SceneLoadingOverlayProps {
  isVisible?: boolean;
  className?: string;
  sceneName?: string; // <-- S·ª≠a th√†nh optional ƒë·ªÉ tr√°nh l·ªói khi kh√¥ng truy·ªÅn
}

interface LoadingState {
  isLoading: boolean;
  sceneName: string;
  sceneDisplayName: string;
  progress: number;
  loadingText: string;
  tips: string[];
  currentTipIndex: number;
  isComplete: boolean;
  currentStepIndex: number;
}

interface GameStep {
  title: string;
  description: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
}

const SCENE_INFO = {
  // Forest Scene variations
  GameScene: {
    displayName: "R·ª´ng Xanh",
    description: "Kh√°m ph√° khu r·ª´ng v·ªõi nh·ªØng th·ª≠ th√°ch th√∫ v·ªã",
    tips: [
      "M√¥i tr∆∞·ªùng r·ª´ng xanh m√°t v·ªõi nhi·ªÅu c√¢y c·ªëi",
      "C√≥ nhi·ªÅu xu v√†ng ·∫©n gi·∫•u trong c√°c g√≥c khu·∫•t",
      "ƒê·ªãa h√¨nh c√≥ nhi·ªÅu n·ªÅn t·∫£ng ƒë·ªÉ nh·∫£y",
      "Th·ªùi gian ho√†n th√†nh: 2-3 ph√∫t",
    ],
    color: "text-green-600",
    bgColor: "bg-green-50",
    icon: Trees,
    steps: [
      {
        title: "Di chuy·ªÉn",
        description:
          "S·ª≠ d·ª•ng WASD ho·∫∑c ph√≠m m≈©i t√™n ƒë·ªÉ di chuy·ªÉn nh√¢n v·∫≠t qua c√°c ƒë·ªãa h√¨nh kh√°c nhau",
        icon: Gamepad2,
      },
      {
        title: "Nh·∫£y",
        description:
          "Nh·∫•n Space ƒë·ªÉ nh·∫£y qua c√°c ch∆∞·ªõng ng·∫°i v·∫≠t v√† l√™n c√°c n·ªÅn t·∫£ng cao",
        icon: Mountain,
      },
      {
        title: "Thu th·∫≠p",
        description:
          "Thu th·∫≠p xu v√†ng v√† c√°c v·∫≠t ph·∫©m ƒë·ªÉ tƒÉng ƒëi·ªÉm s·ªë trong v√≤ng ch∆°i",
        icon: Trees,
      },
    ],
  },
  ForestScene: {
    displayName: "R·ª´ng Xanh",
    description: "Kh√°m ph√° khu r·ª´ng v·ªõi nh·ªØng th·ª≠ th√°ch th√∫ v·ªã",
    tips: [
      "M√¥i tr∆∞·ªùng r·ª´ng xanh m√°t v·ªõi nhi·ªÅu c√¢y c·ªëi",
      "C√≥ nhi·ªÅu xu v√†ng ·∫©n gi·∫•u trong c√°c g√≥c khu·∫•t",
      "ƒê·ªãa h√¨nh c√≥ nhi·ªÅu n·ªÅn t·∫£ng ƒë·ªÉ nh·∫£y",
      "Th·ªùi gian ho√†n th√†nh: 2-3 ph√∫t",
    ],
    color: "text-green-600",
    bgColor: "bg-green-50",
    icon: Trees,
    steps: [
      {
        title: "Di chuy·ªÉn",
        description:
          "S·ª≠ d·ª•ng WASD ho·∫∑c ph√≠m m≈©i t√™n ƒë·ªÉ di chuy·ªÉn nh√¢n v·∫≠t qua c√°c ƒë·ªãa h√¨nh kh√°c nhau",
        icon: Gamepad2,
      },
      {
        title: "Nh·∫£y",
        description:
          "Nh·∫•n Space ƒë·ªÉ nh·∫£y qua c√°c ch∆∞·ªõng ng·∫°i v·∫≠t v√† l√™n c√°c n·ªÅn t·∫£ng cao",
        icon: Mountain,
      },
      {
        title: "Thu th·∫≠p",
        description:
          "Thu th·∫≠p xu v√†ng v√† c√°c v·∫≠t ph·∫©m ƒë·ªÉ tƒÉng ƒëi·ªÉm s·ªë trong v√≤ng ch∆°i",
        icon: Trees,
      },
    ],
  },
  // Desert Scene
  DesertScene: {
    displayName: "Sa M·∫°c V√†ng",
    description: "V∆∞·ª£t qua sa m·∫°c v·ªõi nh·ªØng th·ª≠ th√°ch kh·∫Øc nghi·ªát",
    tips: [
      "M√¥i tr∆∞·ªùng sa m·∫°c kh√¥ c·∫±n v·ªõi nhi·ªÅu th·ª≠ th√°ch",
      "C·∫ßn di chuy·ªÉn nhanh ƒë·ªÉ tr√°nh c√°c nguy hi·ªÉm",
      "C√≥ nhi·ªÅu kho b√°u ·∫©n gi·∫•u trong c√°t",
      "Th·ªùi gian ho√†n th√†nh: 3-4 ph√∫t",
    ],
    color: "text-orange-600",
    bgColor: "bg-orange-50",
    icon: Mountain,
    steps: [
      {
        title: "ThƒÉm d√≤",
        description:
          "Kh√°m ph√° sa m·∫°c v√† t√¨m ki·∫øm c√°c con ƒë∆∞·ªùng an to√†n qua ƒë·ªãa h√¨nh hi·ªÉm tr·ªü",
        icon: Mountain,
      },
      {
        title: "Tr√°nh nguy hi·ªÉm",
        description:
          "C·∫©n th·∫≠n v·ªõi c√°c ch∆∞·ªõng ng·∫°i v·∫≠t v√† b·∫´y ·∫©n gi·∫•u trong sa m·∫°c",
        icon: Lightbulb,
      },
      {
        title: "Thu th·∫≠p kho b√°u",
        description:
          "T√¨m v√† thu th·∫≠p c√°c kho b√°u qu√Ω gi√° ·∫©n gi·∫•u trong c√°t sa m·∫°c",
        icon: Trees,
      },
    ],
  },
  // Default fallback cho c√°c scene kh√°c
  default: {
    displayName: "ƒêang t·∫£i game",
    description: "Chu·∫©n b·ªã tr·∫£i nghi·ªám game th√∫ v·ªã",
    tips: [
      "Chu·∫©n b·ªã cho m·ªôt cu·ªôc phi√™u l∆∞u th√∫ v·ªã",
      "Ki·ªÉm tra c√°c ph√≠m ƒëi·ªÅu khi·ªÉn",
      "S·∫µn s√†ng cho th·ª≠ th√°ch m·ªõi",
      "Ch√∫c b·∫°n ch∆°i game vui v·∫ª!",
    ],
    color: "text-blue-600",
    bgColor: "bg-blue-50",
    icon: Gamepad2,
    steps: [
      {
        title: "Chu·∫©n b·ªã",
        description: "L√†m quen v·ªõi c√°c ph√≠m ƒëi·ªÅu khi·ªÉn v√† c√°ch ch∆°i c∆° b·∫£n",
        icon: Gamepad2,
      },
      {
        title: "Kh√°m ph√°",
        description: "Kh√°m ph√° th·∫ø gi·ªõi game v√† t√¨m hi·ªÉu c√°c c∆° ch·∫ø gameplay",
        icon: Lightbulb,
      },
      {
        title: "Th·ª≠ th√°ch",
        description: "Ho√†n th√†nh c√°c th·ª≠ th√°ch ƒë·ªÉ ti·∫øn t·ªõi v√≤ng ti·∫øp theo",
        icon: Mountain,
      },
    ],
  },
};

export const SceneLoadingOverlay: React.FC<SceneLoadingOverlayProps> = ({
  isVisible = false,
  className = "",
  sceneName = "", // <-- Th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh
}) => {
  const [loadingState, setLoadingState] = useState<LoadingState>({
    isLoading: false,
    sceneName: "",
    sceneDisplayName: "",
    progress: 0,
    loadingText: "ƒêang t·∫£i...",
    tips: [],
    currentTipIndex: 0,
    isComplete: false,
    currentStepIndex: 0,
  });

  useEffect(() => {
    // Ch·ªâ ƒëƒÉng k√Ω listener KHI component ƒë∆∞·ª£c hi·ªÉn th·ªã
    if (isVisible) {
      console.log("üü¢ SceneLoadingOverlay is visible, attaching listeners...");

      // Logic kh·ªüi t·∫°o state khi component ƒë∆∞·ª£c hi·ªÉn th·ªã V√Ä c√≥ sceneName
      if (sceneName) {
        const sceneInfo =
          SCENE_INFO[sceneName as keyof typeof SCENE_INFO] ||
          SCENE_INFO.default;

        setLoadingState({
          isLoading: true,
          sceneName: sceneName,
          sceneDisplayName: sceneInfo.displayName,
          progress: 0,
          loadingText: `ƒêang t·∫£i ${sceneInfo.displayName}...`,
          tips: sceneInfo.tips,
          currentTipIndex: 0,
          isComplete: false,
          currentStepIndex: 0,
        });
      }

      // ƒê·ªãnh nghƒ©a c√°c handler functions
      const handleSceneLoadingStart = (data: { sceneName: string }) => {
        console.log(
          "üé¨ SceneLoadingOverlay: Received scene-loading-start for:",
          data.sceneName
        );
        // Kh√¥ng c·∫ßn l√†m g√¨ v√¨ sceneName ƒë√£ ƒë∆∞·ª£c set t·ª´ props
      };

      const handleLoadingProgress = (data: { progress: number }) => {
        setLoadingState((prev) => ({
          ...prev,
          progress: Math.round(data.progress * 100),
          loadingText:
            data.progress < 1
              ? `ƒêang t·∫£i ${prev.sceneDisplayName}... ${Math.round(
                  data.progress * 100
                )}%`
              : `${prev.sceneDisplayName} ƒë√£ s·∫µn s√†ng!`,
        }));
      };

      // H√†m x·ª≠ l√Ω khi loading xong (d√πng chung cho c·∫£ hai event)
      const handleLoadingIsFinished = () => {
        setLoadingState((prev) => {
          // N·∫øu ƒë√£ complete r·ªìi th√¨ kh√¥ng l√†m g√¨ n·ªØa
          if (prev.isComplete) {
            console.log(
              "‚úÖ SceneLoadingOverlay: Already completed, ignoring duplicate signal"
            );
            return prev;
          }

          console.log(
            "‚úÖ SceneLoadingOverlay: Received completion signal. Showing start button."
          );
          return {
            ...prev,
            progress: 100,
            loadingText: `${prev.sceneDisplayName} ƒë√£ s·∫µn s√†ng!`,
            isComplete: true,
          };
        });
      };

      // ƒêƒÉng k√Ω event listeners
      EventBus.on("scene-loading-start", handleSceneLoadingStart);
      EventBus.on("scene-loading-progress", handleLoadingProgress);

      // Listener c≈©, v·∫´n gi·ªØ l·∫°i ph√≤ng tr∆∞·ªùng h·ª£p t·∫£i ch·∫≠m
      EventBus.on("scene-loading-complete", handleLoadingIsFinished);

      // TH√äM M·ªöI: Listener "d·ª± ph√≤ng" ƒë√°ng tin c·∫≠y
      // S·ª± ki·ªán n√†y lu√¥n ƒë∆∞·ª£c ph√°t ra SAU KHI preload ho√†n t·∫•t.
      EventBus.on("current-scene-ready", handleLoadingIsFinished);

      // FALLBACK CU·ªêI C√ôNG: N·∫øu sau 100ms m√† v·∫´n ch∆∞a complete th√¨ check l·∫°i
      const fallbackTimeout = setTimeout(() => {
        console.log(
          "‚è∞ SceneLoadingOverlay: Fallback timeout triggered, forcing completion"
        );
        handleLoadingIsFinished();
      }, 100);

      // H√†m d·ªçn d·∫πp n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi isVisible chuy·ªÉn th√†nh false
      return () => {
        console.log("üî¥ SceneLoadingOverlay is hidden, removing listeners...");
        clearTimeout(fallbackTimeout);
        EventBus.removeListener("scene-loading-start", handleSceneLoadingStart);
        EventBus.removeListener(
          "scene-loading-progress",
          handleLoadingProgress
        );
        EventBus.removeListener(
          "scene-loading-complete",
          handleLoadingIsFinished
        );
        // TH√äM M·ªöI: D·ªçn d·∫πp listener d·ª± ph√≤ng
        EventBus.removeListener("current-scene-ready", handleLoadingIsFinished);
      };
    } else {
      // Reset state khi component b·ªã ·∫©n ƒëi
      setLoadingState((prevState) => ({
        ...prevState,
        isLoading: false,
        sceneName: "",
      }));
    }
  }, [isVisible, sceneName]); // <--- THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T

  // Auto rotate tips
  useEffect(() => {
    if (loadingState.isLoading && loadingState.tips.length > 0) {
      const interval = setInterval(() => {
        setLoadingState((prev) => ({
          ...prev,
          currentTipIndex: (prev.currentTipIndex + 1) % prev.tips.length,
        }));
      }, 3000); // ƒê·ªïi tip m·ªói 3 gi√¢y

      return () => clearInterval(interval);
    }
  }, [loadingState.isLoading, loadingState.tips.length]);

  // Debug log
  console.log("üé¨ SceneLoadingOverlay render:", {
    isVisible,
    loadingState: loadingState.isLoading,
    sceneName: loadingState.sceneName,
    shouldShow: isVisible,
  });

  // S·ª≠a l·∫°i ƒëi·ªÅu ki·ªán render
  if (!isVisible || !sceneName) {
    return null;
  }

  // B√¢y gi·ªù `loadingState.sceneName` s·∫Ω lu√¥n ƒë√∫ng v√¨ n√≥ ƒë∆∞·ª£c set t·ª´ prop `sceneName`
  const sceneInfo =
    SCENE_INFO[loadingState.sceneName as keyof typeof SCENE_INFO] ||
    SCENE_INFO.default;

  const IconComponent = sceneInfo.icon;
  const currentStep = sceneInfo.steps[loadingState.currentStepIndex];
  const StepIconComponent = currentStep.icon;

  // Handle start game
  const handleStartGame = () => {
    // Emit event ƒë·ªÉ QuizGameWrapper ·∫©n overlay
    EventBus.emit("scene-loading-user-start");
    console.log("üéÆ User started the game");
  };

  // Handle step navigation
  const handlePrevStep = () => {
    setLoadingState((prev) => ({
      ...prev,
      currentStepIndex: Math.max(0, prev.currentStepIndex - 1),
    }));
  };

  const handleNextStep = () => {
    setLoadingState((prev) => ({
      ...prev,
      currentStepIndex: Math.min(
        sceneInfo.steps.length - 1,
        prev.currentStepIndex + 1
      ),
    }));
  };

  return (
    <div
      className={`fixed inset-0 z-[9999] bg-background ${sceneInfo.bgColor} ${className}`}
    >
      {/* Header - T√™n v√≤ng ·ªü tr√™n cƒÉn gi·ªØa */}
      <div className="absolute top-0 left-0 right-0 text-center py-6 sm:py-8">
        <div className="flex items-center justify-center gap-3 mb-2">
          <IconComponent size={32} className={sceneInfo.color} />
          <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-foreground">
            {loadingState.sceneDisplayName}
          </h1>
        </div>
        <p className="text-muted-foreground text-sm sm:text-base">
          {sceneInfo.description}
        </p>
      </div>

      {/* Main content - ·ªû gi·ªØa */}
      <div className="flex items-center justify-center h-full px-6 sm:px-8">
        <div className="text-center max-w-2xl mx-auto">
          {/* Current step */}
          <div className="bg-background/80 rounded-2xl p-6 sm:p-8 border border-border">
            <div className="flex items-center justify-center gap-3 mb-4">
              <div className={`p-3 rounded-xl bg-muted ${sceneInfo.color}`}>
                <StepIconComponent size={32} />
              </div>
              <h2 className="text-xl sm:text-2xl font-bold text-foreground">
                {currentStep.title}
              </h2>
            </div>

            <p className="text-muted-foreground text-base sm:text-lg leading-relaxed mb-6">
              {currentStep.description}
            </p>

            {/* Step navigation */}
            <div className="flex items-center justify-between mb-6">
              <button
                onClick={handlePrevStep}
                disabled={loadingState.currentStepIndex === 0}
                className="flex items-center gap-2 px-4 py-2 rounded-lg bg-muted hover:bg-muted/80 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <ChevronLeft size={16} />
                <span className="text-sm">Tr∆∞·ªõc</span>
              </button>

              <div className="flex space-x-2">
                {sceneInfo.steps.map((_, index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index === loadingState.currentStepIndex
                        ? "bg-primary scale-125"
                        : "bg-muted-foreground/30"
                    }`}
                  />
                ))}
              </div>

              <button
                onClick={handleNextStep}
                disabled={
                  loadingState.currentStepIndex === sceneInfo.steps.length - 1
                }
                className="flex items-center gap-2 px-4 py-2 rounded-lg bg-muted hover:bg-muted/80 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <span className="text-sm">Ti·∫øp</span>
                <ChevronRight size={16} />
              </button>
            </div>

            {/* Start button - ch·ªâ hi·ªán khi loading complete */}
            {loadingState.isComplete && (
              <button
                onClick={handleStartGame}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-3 px-6 rounded-xl transition-colors flex items-center justify-center gap-2"
              >
                <Play size={20} />
                <span>B·∫Øt ƒë·∫ßu ch∆°i</span>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Bottom left - Loading v√† th√¥ng tin */}
      <div className="absolute bottom-6 left-6 flex items-center gap-4">
        {/* Loading spinner */}
        {!loadingState.isComplete && (
          <div className="flex items-center gap-3">
            <div className="animate-spin rounded-full h-8 w-8 border-2 border-muted border-t-primary" />
            <div className="text-sm text-muted-foreground font-medium">
              {loadingState.loadingText}
            </div>
          </div>
        )}

        {/* Rotating tips */}
        <div className="bg-background/80 rounded-lg px-4 py-2 border border-border max-w-xs">
          <div className="flex items-center gap-2 mb-1">
            <Lightbulb size={14} className="text-primary" />
            <span className="text-xs font-medium text-foreground">
              Th√¥ng tin h·ªØu √≠ch
            </span>
          </div>
          <div className="text-xs text-muted-foreground transition-opacity duration-300">
            {loadingState.tips[loadingState.currentTipIndex]}
          </div>
        </div>
      </div>

      {/* Progress bar - bottom */}
      {!loadingState.isComplete && (
        <div className="absolute bottom-0 left-0 right-0 h-1 bg-muted">
          <div
            className="h-full bg-primary transition-all duration-500 ease-out"
            style={{ width: `${loadingState.progress}%` }}
          />
        </div>
      )}
    </div>
  );
};

export default SceneLoadingOverlay;

"use client";

import React, { useState, useEffect, useRef } from "react";
import { toast } from "sonner";
import { Question, Answer, QuizRound } from "@/lib/types/quiz";
import { QuizHeader } from "@/components/features/quiz/live/quiz-header";
import { QuizQuestionDisplay } from "@/components/features/quiz/live/quiz-question-display";
import { RoundTransition } from "@/components/features/quiz/live/round-transition";
import { EventBus } from "../../../../phaser/EventBus";
import { MinigameCore } from "../../../../phaser/classes";

// Gi·∫£ ƒë·ªãnh m·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng ƒë∆∞·ª£c c·ªông 100 ƒëi·ªÉm v√†o ƒëi·ªÉm t·ªïng
const SCORE_PER_CORRECT_ANSWER = 100;
// ƒêi·ªÉm b·ªã tr·ª´ khi tr·∫£ l·ªùi sai ·ªü v√≤ng 5
const SCORE_PENALTY_ROUND_5 = 50;

interface QuizRoundOverlayProps {
  isVisible: boolean;
  roundNumber: number;
  questions: Question[];
  timeLimit: number;
  quizId: number;
  userId: number | string;
  onComplete: (
    // onComplete ch·ªâ c·∫ßn b√°o c√°o s·ªë c√¢u ƒë√∫ng, v√¨ ƒëi·ªÉm t·ªïng ƒë√£ ·ªü trong MinigameCore
    correctAnswersCount: number,
    totalQuestions: number,
    wrongQuestions?: Question[]
  ) => void;
  onClose: () => void;
  // Props cho v√≤ng 5 ƒë·∫∑c bi·ªát
  isSpecialRound?: boolean;
  wrongQuestions?: Question[];
  // Props cho b·∫£ng x·∫øp h·∫°ng
  updateUserPosition?: () => Promise<void>;
  userPosition?: number;
  totalParticipants?: number;
}

export const QuizRoundOverlay: React.FC<QuizRoundOverlayProps> = ({
  isVisible,
  roundNumber,
  questions,
  timeLimit,
  quizId,
  userId,
  onComplete,
  onClose,
  isSpecialRound = false,
  wrongQuestions = [],
  updateUserPosition,
  userPosition,
  totalParticipants,
}) => {
  // === T√ÅCH BI·ªÜT STATE ƒêI·ªÇM S·ªê ===
  const [totalGameScore, setTotalGameScore] = useState(0); // ƒêi·ªÉm t·ªïng, l·∫Øng nghe t·ª´ MinigameCore
  const [correctAnswersCount, setCorrectAnswersCount] = useState(0); // ƒê·∫øm s·ªë c√¢u ƒë√∫ng trong quiz

  // Quiz state
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [score, setScore] = useState(0); // Deprecated - s·∫Ω b·∫±ng correctAnswersCount
  const [showResult, setShowResult] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [wrongAnswers, setWrongAnswers] = useState<Question[]>([]);
  const wrongAnswersRef = useRef<Question[]>([]);

  // Ref ƒë·ªÉ track score real-time (deprecated - d√πng correctAnswersCount)
  const scoreRef = useRef(0);
  const initializedRef = useRef<string | null>(null);
  const completedRef = useRef(false); // Guard ƒë·ªÉ tr√°nh duplicate onComplete calls

  // Timer state
  const [timeLeft, setTimeLeft] = useState(timeLimit);
  const [isTimeWarning, setIsTimeWarning] = useState(false);
  const [startTime] = useState<number>(Date.now());

  // L·∫Øng nghe v√† kh·ªüi t·∫°o ƒëi·ªÉm t·ª´ MinigameCore
  useEffect(() => {
    if (isVisible) {
      // Kh·ªüi t·∫°o ƒëi·ªÉm t·ªïng t·ª´ MinigameCore
      const initialScore = MinigameCore.getInstance().getCurrentScore();
      setTotalGameScore(initialScore);

      // Reset c√°c state c·ªßa v√≤ng quiz
      setCorrectAnswersCount(0);
      setCurrentQuestionIndex(0);
      setSelectedAnswer(null);
      setIsAnswered(false);
      setShowResult(false);
      setScore(0); // Sync v·ªõi correctAnswersCount
      setIsCompleted(false);
      setTimeLeft(timeLimit);
      completedRef.current = false;

      // L·∫Øng nghe s·ª± ki·ªán c·∫≠p nh·∫≠t ƒëi·ªÉm T·ªîNG
      const handleScoreUpdate = (data: { newScore: number }) => {
        setTotalGameScore(data.newScore);
      };
      EventBus.on("minigame-score-updated", handleScoreUpdate);

      console.log(
        `üîÑ Initializing Round ${roundNumber}: totalGameScore=${initialScore}, correctAnswersCount=0`
      );

      // D·ªçn d·∫πp
      return () => {
        EventBus.removeListener("minigame-score-updated", handleScoreUpdate);
      };
    }
  }, [isVisible, roundNumber, questions, timeLimit]);

  // Initialize quiz khi component mount (b·ªï sung cho compatibility)
  useEffect(() => {
    if (isVisible && questions.length > 0) {
      // Tr√°nh re-initialize n·∫øu ƒë√£ init cho round n√†y
      const roundKey = `${roundNumber}-${questions.length}`;
      if (initializedRef.current === roundKey) {
        console.log(`‚ö†Ô∏è Round ${roundNumber} already initialized, skipping`);
        return;
      }

      if (isSpecialRound) {
        console.log(`üîç Special Round 5 questions received:`);
        console.log(`   Questions count: ${questions.length}`);
        console.log(
          `   Question IDs:`,
          questions.map((q) => q.question_id)
        );
        console.log(`   Questions:`, questions);
      }

      // KH√îNG reset wrongAnswersRef ƒë·ªÉ persist qua c√°c round
      // wrongAnswersRef s·∫Ω accumulate t·∫•t c·∫£ c√¢u sai t·ª´ round 1-4
      console.log(
        `üîÑ NOT resetting wrongAnswersRef for round ${roundNumber} (current: ${wrongAnswersRef.current.length} questions)`
      );
      console.log(
        `üîÑ Current wrongAnswersRef:`,
        wrongAnswersRef.current.map((q) => q.question_id)
      );

      initializedRef.current = roundKey;
    }
  }, [isVisible, roundNumber, questions]);

  // Timer countdown
  useEffect(() => {
    if (!isVisible || isCompleted || timeLeft <= 0) return;

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        const newTime = prev - 1;
        setIsTimeWarning(newTime <= 10);

        if (newTime <= 0) {
          clearInterval(timer);
          handleQuizTimeout();
          return 0;
        }
        return newTime;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isVisible, isCompleted, timeLeft]);

  // Format time helper
  const formatTime = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds
      .toString()
      .padStart(2, "0")}`;
  };

  // Handle quiz timeout
  const handleQuizTimeout = () => {
    if (completedRef.current) {
      console.log(`‚ö†Ô∏è Quiz timeout ignored - already completed`);
      return;
    }
    completedRef.current = true;
    setIsCompleted(true);
    setTimeout(() => {
      // B√°o c√°o s·ªë c√¢u ƒë√∫ng khi timeout
      onComplete(correctAnswersCount, questions.length);
    }, 1500);
  };

  // X·ª≠ l√Ω khi ch·ªçn ƒë√°p √°n
  const handleAnswerSelect = async (
    selectedAnswer: number | null,
    isCorrect: boolean
  ) => {
    // X·ª≠ l√Ω t∆∞∆°ng t·ª± nh∆∞ handleAnswerSelect nh∆∞ng v·ªõi interface m·ªõi
    if (isAnswered) return;

    console.log(
      `üîç Answer select via QuizQuestionDisplay: questionIndex=${currentQuestionIndex}, answerId=${selectedAnswer}, correctAnswersCount=${correctAnswersCount}, totalGameScore=${totalGameScore}`
    );

    setSelectedAnswer(selectedAnswer);
    setIsAnswered(true);
    setIsCorrect(isCorrect);
    setShowResult(true);

    if (isCorrect) {
      // 1. Lu√¥n c·∫≠p nh·∫≠t s·ªë c√¢u ƒë√∫ng (cho UI g√≥c ph·∫£i)
      const newCorrectCount = correctAnswersCount + 1;
      setCorrectAnswersCount(newCorrectCount);
      setScore(newCorrectCount); // Sync backward compatibility

      // 2. Ch·ªâ c·ªông ƒëi·ªÉm v√†o ƒêI·ªÇM T·ªîNG n·∫øu KH√îNG PH·∫¢I v√≤ng 5
      if (roundNumber !== 5) {
        MinigameCore.getInstance().addScore(SCORE_PER_CORRECT_ANSWER);
        console.log(
          `‚úÖ Correct answer (Round ${roundNumber}): correctAnswersCount=${correctAnswersCount} ‚Üí ${newCorrectCount}, adding ${SCORE_PER_CORRECT_ANSWER} to totalGameScore`
        );
      } else {
        console.log(
          `‚úÖ Correct answer (Round 5): correctAnswersCount=${correctAnswersCount} ‚Üí ${newCorrectCount}, NO SCORE ADDED (special round)`
        );
      }
    } else {
      // V√íNG 5: Tr·∫£ l·ªùi sai s·∫Ω b·ªã TR·ª™ ƒëi·ªÉm
      if (roundNumber === 5) {
        MinigameCore.getInstance().subtractScore(SCORE_PENALTY_ROUND_5);
        toast.error(`Tr·∫£ l·ªùi sai! B·ªã tr·ª´ ${SCORE_PENALTY_ROUND_5} ƒëi·ªÉm`);
        console.log(
          `‚ùå Wrong answer (Round 5): correctAnswersCount remains ${correctAnswersCount}, PENALTY: -${SCORE_PENALTY_ROUND_5} points`
        );
      } else {
        console.log(
          `‚ùå Wrong answer (Round ${roundNumber}): correctAnswersCount remains ${correctAnswersCount}, no penalty`
        );
      }

      // Track c√¢u sai cho v√≤ng 5 (ch·ªâ track khi kh√¥ng ph·∫£i v√≤ng ƒë·∫∑c bi·ªát)
      if (!isSpecialRound) {
        const currentQuestion = questions[currentQuestionIndex];
        if (
          currentQuestion &&
          !wrongAnswersRef.current.find(
            (q) => q.question_id === currentQuestion.question_id
          )
        ) {
          console.log(
            `üìù Adding wrong question to Round 5: ${currentQuestion.question_id}`
          );
          wrongAnswersRef.current = [
            ...wrongAnswersRef.current,
            currentQuestion,
          ];
          setWrongAnswers(wrongAnswersRef.current);
          console.log(`üìù Updated wrongAnswersRef:`, wrongAnswersRef.current);
        }
      }
    }

    // C·∫≠p nh·∫≠t v·ªã tr√≠ b·∫£ng x·∫øp h·∫°ng
    if (updateUserPosition) {
      try {
        await updateUserPosition();
        console.log("üèÜ User position updated after answer");
      } catch (error) {
        console.error("‚ùå Failed to update user position:", error);
      }
    }

    // Auto chuy·ªÉn c√¢u sau 2 gi√¢y
    setTimeout(() => {
      handleNextQuestion();
    }, 2000);
  };

  // Chuy·ªÉn c√¢u ti·∫øp theo
  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1);
      setSelectedAnswer(null);
      setIsAnswered(false);
      setShowResult(false);
      setIsCorrect(false);
    } else {
      // Ho√†n th√†nh round - b√°o c√°o s·ªë c√¢u ƒë√∫ng
      if (completedRef.current) {
        console.log(`‚ö†Ô∏è Round completion ignored - already completed`);
        return;
      }
      completedRef.current = true;
      setIsCompleted(true);
      setTimeout(() => {
        // B√°o c√°o s·ªë c√¢u ƒë√∫ng
        const finalCorrectCount = correctAnswersCount;
        console.log(
          `üéØ Round ${roundNumber} Final: ${finalCorrectCount}/${questions.length} correct answers`
        );

        // G·ªçi onComplete v√† ƒë·ªÉ QuizGameWrapper quy·∫øt ƒë·ªãnh l√†m g√¨ ti·∫øp theo
        onComplete(
          finalCorrectCount,
          questions.length,
          wrongAnswersRef.current
        );
      }, 1500);
    }
  };

  // Ki·ªÉm tra visibility
  if (!isVisible) return null;

  // Round completed state - S·ª≠ d·ª•ng RoundTransition component
  if (isCompleted) {
    const percentage = Math.round(
      (correctAnswersCount / questions.length) * 100
    );

    return (
      <RoundTransition
        visible={isCompleted}
        currentRound={roundNumber + 1} // +1 v√¨ RoundTransition hi·ªÉn th·ªã "Ho√†n th√†nh V√≤ng X"
        roundConfig={{
          round: roundNumber + 1,
          name: `V√≤ng ${roundNumber + 1}`,
          description: `Chu·∫©n b·ªã v√≤ng ti·∫øp theo`,
          allowBackNavigation: false,
          trackIncorrectAnswers: true,
        }}
        questionsInRound={questions.length}
        previousRoundStats={{
          attempted: questions.length,
          correct: correctAnswersCount,
          incorrect: questions.length - correctAnswersCount,
        }}
        roundTotalScore={totalGameScore}
        onComplete={() => {
          // Callback n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi sau khi animation ho√†n th√†nh
          // Trigger onComplete c·ªßa parent component
          if (completedRef.current) {
            console.log(
              `‚ö†Ô∏è RoundTransition onComplete ignored - already completed`
            );
            return;
          }
          completedRef.current = true;
          setTimeout(() => {
            onComplete(correctAnswersCount, questions.length);
          }, 500);
        }}
      />
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  if (!currentQuestion) return null;

  return (
    <div className="fixed inset-0 bg-background z-50 overflow-y-auto">
      <div className="min-h-full flex flex-col">
        {/* T·∫≠n d·ª•ng QuizHeader t·ª´ quiz-live system - Fixed header */}
        <div className="sticky top-0 z-10 bg-background border-b">
          {/* TRUY·ªÄN C·∫¢ 2 GI√Å TR·ªä ƒêI·ªÇM V√ÄO HEADER */}
          <QuizHeader
            currentQuestionIndex={currentQuestionIndex}
            totalQuestions={questions.length}
            currentScore={correctAnswersCount} // ƒêi·ªÉm v√≤ng quiz (s·ªë c√¢u ƒë√∫ng)
            totalGameScore={totalGameScore} // ƒêi·ªÉm t·ªïng c·ªßa game
            totalQuestionsOverall={questions.length}
            quizTimeLeft={timeLeft}
            onPrevQuestion={() => {
              if (currentQuestionIndex > 0 && !isAnswered) {
                setCurrentQuestionIndex((prev) => prev - 1);
                setSelectedAnswer(null);
                setIsAnswered(false);
                setShowResult(false);
              }
            }}
            onNextQuestion={() => {
              if (currentQuestionIndex < questions.length - 1 && isAnswered) {
                handleNextQuestion();
              }
            }}
            formatTime={formatTime}
            // B·∫£ng x·∫øp h·∫°ng props
            userPosition={userPosition}
            totalParticipants={totalParticipants}
            // Round system props
            currentRound={roundNumber}
            roundConfig={{
              round: roundNumber,
              name: isSpecialRound
                ? `V√≤ng ${roundNumber} - ƒê·∫∑c Bi·ªát`
                : `V√≤ng ${roundNumber}`,
              description: `Quiz v√≤ng ${roundNumber} - ${questions.length} c√¢u h·ªèi`,
              allowBackNavigation: false,
              trackIncorrectAnswers: true,
            }}
            canNavigateBack={false}
            // Navigation props
            canMoveToNextRound={false}
            // Game mode props
            isGameMode={true} // ·∫®n navigation buttons trong game mode
          />
        </div>

        {/* Main content - Full scroll */}
        <div className="flex-1 pt-12">
          {/* T·∫≠n d·ª•ng QuizQuestionDisplay t·ª´ quiz-live system */}
          <QuizQuestionDisplay
            key={`round-${roundNumber}-question-${currentQuestion.question_id}-${currentQuestionIndex}`}
            question={currentQuestion}
            quizId={quizId}
            questionIndex={currentQuestionIndex}
            totalQuestions={questions.length}
            answered={isAnswered}
            selectedAnswer={selectedAnswer}
            isCorrect={isCorrect}
            currentRound={roundNumber}
            roundAnswered={isAnswered ? roundNumber : 0}
            onAnswer={async (selectedAnswer, isCorrect) => {
              await handleAnswerSelect(selectedAnswer, isCorrect);
            }}
          />
        </div>
      </div>
    </div>
  );
};

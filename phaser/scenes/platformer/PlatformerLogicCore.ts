import { IPlatformerRules } from "./rules/IPlatformerRules";
import { BasePlatformerScene } from "./BasePlatformerScene";

/**
 * üéÆ PLATFORMER LOGIC CORE - C·ªó m√°y logic thu·∫ßn t√∫y (Pure Logic Engine)
 *
 * KI·∫æN TR√öC CU·ªêI C√ôNG - STATELESS LOGIC ENGINE:
 * - Ho√†n to√†n kh√¥ng tr·∫°ng th√°i (stateless)
 * - Nh·∫≠n scene nh∆∞ tham s·ªë t·∫°m th·ªùi, kh√¥ng l∆∞u tr·ªØ
 * - Ch·ªâ l√† "detector" thu·∫ßn t√∫y ph√°t hi·ªán v√† ph√¢n lo·∫°i s·ª± ki·ªán
 * - ·ª¶y quy·ªÅn HO√ÄN TO√ÄN cho IPlatformerRules
 * - Zero scene dependency - Pure functions only
 *
 * TR√ÅCH NHI·ªÜM:
 * - Ph√°t hi·ªán v√† ph√¢n lo·∫°i tile interactions
 * - X·ª≠ l√Ω logic chung (remove tiles)
 * - ·ª¶y quy·ªÅn m·ªçi logic nghi·ªáp v·ª• cho Strategy (Rules)
 * - Cung c·∫•p helper methods cho tile detection
 *
 * KI·∫æN TR√öC:
 * - Strategy Pattern: 100% dependency injection v·ªõi IPlatformerRules
 * - Pure Function Style: Scene v√† objects ƒë∆∞·ª£c truy·ªÅn v√†o method calls
 * - Stateless Design: Kh√¥ng l∆∞u tr·ªØ b·∫•t k·ª≥ state n√†o
 */
export class PlatformerLogicCore {
  private rules: IPlatformerRules;

  constructor(rules: IPlatformerRules) {
    this.rules = rules;
    console.log(
      `üéÆ PlatformerLogicCore: Initialized as stateless logic engine with strategy pattern`
    );
  }

  // === TILE INTERACTION LOGIC ===

  /**
   * üí∞ HANDLE TILE OVERLAP - Stateless collision detection and delegation
   *
   * PURE FUNCTION APPROACH:
   * - Nh·∫≠n scene nh∆∞ tham s·ªë t·∫°m th·ªùi
   * - Ph√°t hi·ªán lo·∫°i tile v√† x·ª≠ l√Ω logic chung
   * - ·ª¶y quy·ªÅn ho√†n to√†n cho Strategy (Rules)
   * - Kh√¥ng l∆∞u tr·ªØ b·∫•t k·ª≥ state n√†o
   *
   * @param tile - Tile m√† player ch·∫°m v√†o
   * @param tilemapLayer - TilemapLayer ƒë·ªÉ x√≥a tile (optional)
   * @param scene - Scene ƒë∆∞·ª£c truy·ªÅn t·ª´ collision callback
   */
  public handleTileOverlap(
    tile: Phaser.Tilemaps.Tile,
    tilemapLayer: Phaser.Tilemaps.TilemapLayer | undefined,
    scene: BasePlatformerScene
  ): void {
    // 1. Ph√°t hi·ªán v√† ph√¢n lo·∫°i tile
    if (this.isCollectibleTile(tile)) {
      // 2. X·ª≠ l√Ω logic chung: x√≥a tile collectible
      this.removeTileFromMap(tile, tilemapLayer);

      // 3. ·ª¶y quy·ªÅn ho√†n to√†n cho Strategy Pattern
      this.rules.handleCollectible(tile, scene);
    } else if (this.isTrapTile(tile)) {
      // Trap tiles kh√¥ng x√≥a, ch·ªâ trigger effect
      this.rules.handleCollectible(tile, scene);
    }
  }

  // === OBJECT INTERACTION LOGIC ===

  /**
   * üéØ HANDLE INTERACTIVE OBJECT - Pure delegation to Strategy Pattern
   *
   * STATELESS APPROACH:
   * - Nh·∫≠n scene nh∆∞ tham s·ªë, kh√¥ng l∆∞u tr·ªØ
   * - ·ª¶y quy·ªÅn ho√†n to√†n cho rules implementation
   * - Kh√¥ng c√≥ logic nghi·ªáp v·ª• trong core
   *
   * @param objectName - T√™n object t·ª´ Tiled
   * @param objectData - Data object t·ª´ Tiled
   * @param scene - Scene ƒë∆∞·ª£c truy·ªÅn t·ª´ interaction callback
   */
  public handleInteractiveObject(
    objectName: string,
    objectData: any,
    scene: BasePlatformerScene
  ): void {
    // Ho√†n to√†n ·ªßy quy·ªÅn cho Strategy Pattern
    this.rules.handleInteractiveObject(objectName, objectData, scene);
  }

  // === PUBLIC HELPER METHODS - Utility functions for tile detection ===

  /**
   * ü™ô IS COIN TILE - Public utility for tile type detection
   */
  public isCoinTile(tile: Phaser.Tilemaps.Tile): boolean {
    return (
      tile.properties &&
      tile.properties.type === "collectible" &&
      tile.properties.name === "xu"
    );
  }

  /**
   * ‚ö° IS POWER UP TILE - Public utility for tile type detection
   */
  public isPowerUpTile(tile: Phaser.Tilemaps.Tile): boolean {
    return (
      tile.properties &&
      tile.properties.type === "collectible" &&
      tile.properties.name === "powerup"
    );
  }

  /**
   * üï≥Ô∏è IS TRAP TILE - Public utility for tile type detection
   */
  public isTrapTile(tile: Phaser.Tilemaps.Tile): boolean {
    return tile.properties && tile.properties.type === "trap";
  }

  /**
   * üíé IS COLLECTIBLE TILE - Public utility for general collectible detection
   */
  public isCollectibleTile(tile: Phaser.Tilemaps.Tile): boolean {
    return tile.properties && tile.properties.type === "collectible";
  }

  /**
   * üóëÔ∏è REMOVE TILE FROM MAP - Shared utility for tile removal
   */
  private removeTileFromMap(
    tile: Phaser.Tilemaps.Tile,
    tilemapLayer?: Phaser.Tilemaps.TilemapLayer
  ): void {
    if (tilemapLayer) {
      tilemapLayer.removeTileAt(tile.x, tile.y, true, true);
    } else if (tile.tilemap && tile.layer) {
      tile.tilemap.removeTileAt(
        tile.x,
        tile.y,
        true,
        true,
        tile.layer.tilemapLayer
      );
    }
  }

  // === CLEANUP ===

  /**
   * üóëÔ∏è CLEANUP - Stateless cleanup, delegates to rules
   */
  public cleanup(): void {
    console.log("üóëÔ∏è PlatformerLogicCore: Stateless logic engine cleanup");
    // Cleanup Strategy Pattern rules
    this.rules.cleanup();
  }
}

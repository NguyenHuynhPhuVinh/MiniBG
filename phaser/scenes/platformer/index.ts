/**
 * üéÆ PLATFORMER SCENES - Export t·∫•t c·∫£ platformer-related scenes v√† specialists
 *
 * Ki·∫øn tr√∫c ƒëa c·∫•p theo d·∫°ng ch∆°i (ƒë√£ t√°i c·∫•u tr√∫c):
 * - BaseGameScene (C·∫•p 1): Logic chung nh·∫•t cho t·∫•t c·∫£ minigame
 * - BasePlatformerScene (C·∫•p 2): Logic chung cho d·∫°ng ch∆°i platformer (ƒë√£ ƒë∆∞·ª£c tinh g·ªçn)
 * - ForestScene, DesertScene (C·∫•p 3): Scene c·ª• th·ªÉ v·ªõi config ri√™ng
 * - PlatformerLogicCore: Core logic t√°ch bi·ªát (Composition pattern)
 *
 * C√ÅC CHUY√äN GIA HELPERS (m·ªõi):
 * - PlatformerWorldBuilder: Chuy√™n gia x√¢y d·ª±ng th·∫ø gi·ªõi t·ª´ Tiled
 * - PlatformerPlayerHandler: Chuy√™n gia v·ªÅ ng∆∞·ªùi ch∆°i v√† physics
 */

// === BASE CLASSES ===
export { BaseGameScene } from "../BaseGameScene";
export { BasePlatformerScene } from "./BasePlatformerScene";

// === LOGIC CORE ===
export { PlatformerLogicCore } from "./PlatformerLogicCore";

// === CHUY√äN GIA HELPERS ===
export { PlatformerWorldBuilder } from "./PlatformerWorldBuilder";
export { PlatformerPlayerHandler } from "./PlatformerPlayerHandler";

// === CONCRETE SCENES ===
export { ForestScene } from "./ForestScene";
export { DesertScene } from "./DesertScene";

// === TYPE DEFINITIONS ===
export interface PlatformerSceneConfig {
  tilemapKey: string;
  tilemapPath: string;
  sceneName: string;
  customPhysics?: {
    speed?: number;
    jumpPower?: number;
    gravity?: number;
    bounce?: number;
  };
}

export interface PlatformerStats {
  coinsCollected: number;
  secretsFound: number;
  timeRemaining: number;
  completionBonus: number;
}

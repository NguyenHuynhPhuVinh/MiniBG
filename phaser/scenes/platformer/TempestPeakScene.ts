import { BasePlatformerScene } from "./BasePlatformerScene";
import { IPlatformerRules, DesertSpecificRules } from "./rules";
import { WindEffect } from "../../classes/platformer/effects";

/**
 * ‚õ∞Ô∏è TEMPEST PEAK SCENE - C·∫•p 3: Scene c·ª• th·ªÉ cho level gi√≥ b√£o leo d·ªçc
 */
export class TempestPeakScene extends BasePlatformerScene {
  // === SCENE CONFIGURATION - Implement abstract properties ===
  protected readonly TILEMAP_KEY = "TempestPeakScene";
  protected readonly TILEMAP_PATH =
    "/tiled-projects/exports/TempestPeakScene.json";
  protected readonly SCENE_NAME = "TempestPeakScene";

  constructor() {
    super({
      key: "TempestPeakScene",
      physics: {
        default: "arcade",
        arcade: {},
        matter: {
          gravity: { y: 0.8 },
          debug: false,
        } as any,
      },
    });
  }

  /**
   * üéØ CREATE RULES - Implementation c·ªßa Strategy Pattern
   */
  protected createRules(): IPlatformerRules {
    console.log("‚õ∞Ô∏è TempestPeakScene: Using DesertSpecificRules");
    return new DesertSpecificRules();
  }

  /**
   * üì¶ LOAD SCENE SPECIFIC ASSETS - Implement abstract method
   */
  protected loadSceneSpecificAssets(): void {
    console.log("‚õ∞Ô∏è Tempest Peak scene: Using common platformer assets");
  }

  /**
   * üé¨ INITIALIZE SCENE - Ghi ƒë√® ƒë·ªÉ th√™m hi·ªáu ·ª©ng m√¥i tr∆∞·ªùng
   */
  protected initializeScene(): void {
    super.initializeScene();
    console.log(`üå™Ô∏è TempestPeakScene: Activating WindEffect.`);
    this.environmentalEffect = new WindEffect();
    this.environmentalEffect.initialize(this);
  }

  /**
   * üéµ POST INITIALIZE - Hook optional
   */
  protected postInitialize(): void {
    super.postInitialize();
    console.log(
      "‚úÖ TempestPeakScene: Setup completed with DesertSpecificRules"
    );
  }
}

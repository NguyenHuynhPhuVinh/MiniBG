import { BasePlatformerScene } from "./BasePlatformerScene";
import { IPlatformerRules, StandardRules } from "./rules";

/**
 * üå≤ FOREST SCENE - C·∫•p 3: Scene c·ª• th·ªÉ cho Forest level
 *
 * KI·∫æN TR√öC M·ªöI v·ªõi STRATEGY PATTERN:
 * - Ch·ªâ c·∫ßn ch·ªçn b·ªô quy t·∫Øc th√¥ng qua createRules()
 * - C·ª±c k·ª≥ ƒë∆°n gi·∫£n - ch·ªâ 15-20 d√≤ng code thay v√¨ 400+ d√≤ng c≈©
 * - T√°i s·ª≠ d·ª•ng to√†n b·ªô logic t·ª´ BasePlatformerScene
 *
 * TR√ÅCH NHI·ªÜM:
 * - Cung c·∫•p config: tilemap key, path, scene name
 * - Ch·ªçn b·ªô quy t·∫Øc: StandardRules cho forest
 * - (Optional) Load assets ri√™ng cho forest n·∫øu c·∫ßn
 * - (Optional) Override behavior n·∫øu forest c√≥ g√¨ ƒë·∫∑c bi·ªát
 *
 * KI·∫æN TR√öC:
 * - K·∫ø th·ª´a t·ª´ BasePlatformerScene
 * - Strategy Pattern: Ch·ªçn StandardRules cho lu·∫≠t ch∆°i
 * - Ch·ªâ c·∫ßn provide configuration v√† rules
 */
export class ForestScene extends BasePlatformerScene {
  // === SCENE CONFIGURATION - Implement abstract properties ===
  protected readonly TILEMAP_KEY = "level-1-forest";
  protected readonly TILEMAP_PATH =
    "/tiled-projects/exports/level-1-forest.json";
  protected readonly SCENE_NAME = "ForestScene";

  constructor() {
    super({ key: "ForestScene" });
  }

  /**
   * üéØ CREATE RULES - Implementation c·ªßa Strategy Pattern
   *
   * Ch·ªçn b·ªô quy t·∫Øc ti√™u chu·∫©n cho m√†n ch∆°i Forest.
   * ƒêi·ªÉm m·∫°nh: C√≥ th·ªÉ ƒë·ªïi th√†nh b·ªô quy t·∫Øc kh√°c ch·ªâ b·∫±ng 1 d√≤ng code!
   *
   * @returns StandardRules - B·ªô quy t·∫Øc ti√™u chu·∫©n
   */
  protected createRules(): IPlatformerRules {
    console.log("üå≤ ForestScene: Using StandardRules");
    return new StandardRules();

    // Trong t∆∞∆°ng lai, n·∫øu mu·ªën forest c√≥ lu·∫≠t ƒë·∫∑c bi·ªát:
    // return new ForestSpecificRules();
  }

  /**
   * üì¶ LOAD SCENE SPECIFIC ASSETS - Implement abstract method
   */
  protected loadSceneSpecificAssets(): void {
    console.log("üå≤ Forest scene: Using common platformer assets");

    // Forest scene hi·ªán t·∫°i d√πng common platformer assets
    // N·∫øu c·∫ßn assets ri√™ng cho forest:
    // this.load.audio("forest-ambience", "/sounds/forest-ambience.ogg");
    // this.load.image("forest-particles", "/effects/forest-particles.png");
  }

  // === OPTIONAL CUSTOMIZATIONS - C√≥ th·ªÉ override n·∫øu c·∫ßn ===

  /**
   * ‚ö° GET PLAYER PHYSICS CONFIG - Override n·∫øu forest c·∫ßn physics kh√°c
   */
  public getPlayerPhysicsConfig() {
    return {
      speed: 200, // Standard speed
      jumpPower: 700, // Standard jump
      gravity: 800, // Standard gravity
      bounce: 0.2, // Standard bounce
    };

    // Trong t∆∞∆°ng lai, c√≥ th·ªÉ custom cho forest:
    // return {
    //   speed: 220,      // Slightly faster in forest
    //   jumpPower: 750,  // Slightly higher jump (tree climbing?)
    //   gravity: 750,    // Slightly less gravity (magical forest?)
    //   bounce: 0.3,     // More bouncy (soft forest floor?)
    // };
  }

  /**
   * üéµ POST INITIALIZE - Override ƒë·ªÉ th√™m forest-specific logic
   */
  protected postInitialize(): void {
    super.postInitialize();

    // Forest-specific enhancements c√≥ th·ªÉ th√™m sau
    console.log("ÔøΩ Forest scene: Basic setup completed with StandardRules");
  }
}

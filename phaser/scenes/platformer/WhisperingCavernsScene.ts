import { BasePlatformerScene } from "./BasePlatformerScene";
// THAY ƒê·ªîI IMPORT: S·ª≠ d·ª•ng CavernRules thay v√¨ StandardRules
import { IPlatformerRules, CavernRules } from "./rules";
import { Player as PlayerStateSchema } from "../../classes/core/types/GameRoomState";
import * as Phaser from "phaser"; // Import Phaser ƒë·ªÉ d√πng c√°c ti·ªán √≠ch m√†u s·∫Øc

/**
 * üî• WHISPERING CAVERNS SCENE - M√†n ch∆°i Hang ƒê·ªông Th√¨ Th·∫ßm
 * T·∫≠p trung v√†o c∆° ch·∫ø √°nh s√°ng v√† b√≥ng t·ªëi.
 */
export class WhisperingCavernsScene extends BasePlatformerScene {
  protected readonly TILEMAP_KEY = "WhisperingCavernsScene";
  protected readonly TILEMAP_PATH =
    "/tiled-projects/exports/WhisperingCavernsScene.json";
  protected readonly SCENE_NAME = "WhisperingCavernsScene";

  private playerLight!: Phaser.GameObjects.Light;

  // M·ªöI: M·∫£ng ch·ª©a c√°c m·ª©c ƒë·ªô t·ªëi
  private readonly DARKNESS_STAGES = [
    0x303030, // C·∫•p 0 (Ban ƒë·∫ßu): M·ªù m·ªù s√°ng
    0x101010, // C·∫•p 1 (Checkpoint 1): T·ªëi h∆°n
    0x000000, // C·∫•p 2 (Checkpoint 2): T·ªëi ƒëen
  ];

  constructor() {
    super({
      key: "WhisperingCavernsScene",
      physics: {
        default: "arcade",
        arcade: {},
        matter: {
          gravity: { y: 0.8 },
          debug: false, // B·∫¨T DEBUG ƒê·ªÇ XEM COLLISION BOUNDARIES!
        } as any,
      },
    });
  }

  /**
   * ƒê√¢y l√† m·ªôt "c√¥ng t·∫Øc" b√°o cho c√°c h·ªá th·ªëng kh√°c bi·∫øt scene n√†y c√≥ s·ª≠ d·ª•ng √°nh s√°ng.
   */
  public isLightingEnabled(): boolean {
    return true; // Tr·∫£ v·ªÅ true ƒë·ªÉ b·∫≠t h·ªá th·ªëng √°nh s√°ng
  }

  /**
   * K√≠ch ho·∫°t h·ªá th·ªëng √°nh s√°ng c·ªßa Phaser v√† thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng t·ªëi.
   */
  protected initializeScene(): void {
    // G·ªçi h√†m c·ªßa l·ªõp cha ƒë·ªÉ x√¢y d·ª±ng th·∫ø gi·ªõi tr∆∞·ªõc
    super.initializeScene();

    // === K√çCH HO·∫†T H·ªÜ TH·ªêNG √ÅNH S√ÅNG ===
    console.log("üî¶ WhisperingCavernsScene: Enabling lighting system.");

    // 1. B·∫≠t h·ªá th·ªëng ƒë√®n
    this.lights.enable();

    // THAY ƒê·ªîI: Thi·∫øt l·∫≠p ƒë·ªô s√°ng ban ƒë·∫ßu (C·∫•p 0)
    this.lights.setAmbientColor(this.DARKNESS_STAGES[0]);
  }

  /**
   * TH√äM M·ªöI: Ghi ƒë√® ph∆∞∆°ng th·ª©c t·∫°o player ƒë·ªÉ th√™m ngu·ªìn s√°ng
   */
  public createMainPlayer(playerState: PlayerStateSchema): void {
    // G·ªçi ph∆∞∆°ng th·ª©c g·ªëc c·ªßa l·ªõp cha ƒë·ªÉ t·∫°o player nh∆∞ b√¨nh th∆∞·ªùng
    super.createMainPlayer(playerState);

    // Sau khi player ƒë√£ ƒë∆∞·ª£c t·∫°o, th√™m m·ªôt ngu·ªìn s√°ng v√†o n√≥
    if (this.player) {
      const playerSprite = this.player.getSprite();

      // T·∫°o m·ªôt ngu·ªìn s√°ng nh·ªè, m√†u cam ·∫•m, ƒëi theo ng∆∞·ªùi ch∆°i
      this.playerLight = this.lights.addLight(
        playerSprite.x,
        playerSprite.y,
        150, // B√°n k√≠nh √°nh s√°ng (pixel)
        0xffa500, // M√†u cam ·∫•m gi·ªëng ƒëu·ªëc
        1.2 // C∆∞·ªùng ƒë·ªô s√°ng
      );

      console.log("üî¶ Added personal light source to the main player.");
    }
  }

  /**
   * TH√äM M·ªöI: Ghi ƒë√® v√≤ng l·∫∑p update ƒë·ªÉ c·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa ƒë√®n
   */
  // TH√äM M·ªöI: H√†m c√¥ng khai ƒë·ªÉ Rules c√≥ th·ªÉ g·ªçi
  /**
   * Thi·∫øt l·∫≠p ƒë·ªô t·ªëi c·ªßa m√†n ch∆°i m·ªôt c√°ch m∆∞·ª£t m√†.
   * @param level C·∫•p ƒë·ªô t·ªëi (0, 1, 2, ...)
   */
  public setDarknessLevel(level: number): void {
    const targetColorValue =
      this.DARKNESS_STAGES[Math.min(level, this.DARKNESS_STAGES.length - 1)];

    console.log(
      `üî¶ Transitioning ambient light to level ${level} (color: ${targetColorValue.toString(
        16
      )})`
    );

    // T·∫°o hi·ªáu ·ª©ng chuy·ªÉn m√†u m∆∞·ª£t trong 1.5 gi√¢y
    const startColor = Phaser.Display.Color.ValueToColor(
      this.lights.ambientColor
    );
    const endColor = Phaser.Display.Color.ValueToColor(targetColorValue);

    this.tweens.addCounter({
      from: 0,
      to: 100,
      duration: 1500, // 1.5 gi√¢y
      ease: "Sine.easeInOut",
      onUpdate: (tween) => {
        const value = tween.getValue() || 0;
        const colorObject = Phaser.Display.Color.Interpolate.ColorWithColor(
          startColor,
          endColor,
          100,
          value
        );
        const newColor = Phaser.Display.Color.GetColor(
          colorObject.r,
          colorObject.g,
          colorObject.b
        );
        this.lights.setAmbientColor(newColor);
      },
    });
  }

  update(): void {
    // G·ªçi update c·ªßa l·ªõp cha ƒë·ªÉ x·ª≠ l√Ω logic game
    super.update();

    // C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa ƒë√®n theo v·ªã tr√≠ c·ªßa ng∆∞·ªùi ch∆°i m·ªói frame
    if (this.playerLight && this.player) {
      const playerSprite = this.player.getSprite();
      this.playerLight.setPosition(playerSprite.x, playerSprite.y);
    }
  }

  // THAY ƒê·ªîI: S·ª≠ d·ª•ng b·ªô lu·∫≠t m·ªõi
  protected createRules(): IPlatformerRules {
    return new CavernRules();
  }

  protected loadSceneSpecificAssets(): void {
    // Kh√¥ng c·∫ßn assets ri√™ng cho m√†n n√†y ·ªü phi√™n b·∫£n c∆° b·∫£n
  }

  /**
   * TH√äM M·ªöI: D·ªçn d·∫πp ƒë√®n khi scene k·∫øt th√∫c
   */
  protected cleanupOnShutdown(): void {
    if (this.playerLight) {
      this.lights.removeLight(this.playerLight);
      (this.playerLight as any) = null;
    }
    super.cleanupOnShutdown();
  }
}

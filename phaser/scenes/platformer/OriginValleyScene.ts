import { BasePlatformerScene } from "./BasePlatformerScene";
import { IPlatformerRules, StandardRules } from "./rules";

/**
 * üåø ORIGIN VALLEY SCENE - C·∫•p 3: Scene c·ª• th·ªÉ cho level kh·ªüi ƒë·∫ßu
 *
 * KI·∫æN TR√öC M·ªöI v·ªõi STRATEGY PATTERN:
 * - Ch·ªâ c·∫ßn ch·ªçn b·ªô quy t·∫Øc th√¥ng qua createRules()
 * - T√°i s·ª≠ d·ª•ng to√†n b·ªô logic t·ª´ BasePlatformerScene
 */
export class OriginValleyScene extends BasePlatformerScene {
  // === SCENE CONFIGURATION - Implement abstract properties ===
  protected readonly TILEMAP_KEY = "OriginValleyScene";
  protected readonly TILEMAP_PATH =
    "/tiled-projects/exports/OriginValleyScene.json";
  protected readonly SCENE_NAME = "OriginValleyScene";

  constructor() {
    super({
      key: "OriginValleyScene",
      physics: {
        default: "arcade",
        arcade: {},
        matter: {
          gravity: { y: 0.8 },
          debug: false, // B·∫¨T DEBUG ƒê·ªÇ XEM COLLISION BOUNDARIES!
        } as any,
      },
    });
  }

  /**
   * üéØ CREATE RULES - Implementation c·ªßa Strategy Pattern
   */
  protected createRules(): IPlatformerRules {
    console.log("üåø OriginValleyScene: Using StandardRules");
    return new StandardRules();
  }

  /**
   * üì¶ LOAD SCENE SPECIFIC ASSETS - Implement abstract method
   */
  protected loadSceneSpecificAssets(): void {
    console.log("üåø Origin Valley scene: Using common platformer assets");
  }

  /**
   * ‚ö° GET PLAYER PHYSICS CONFIG - Override n·∫øu c·∫ßn
   */
  public getPlayerPhysicsConfig() {
    return {
      speed: 200,
      jumpPower: 700,
      gravity: 800,
      bounce: 0.2,
    };
  }

  /**
   * üéµ POST INITIALIZE - Hook optional
   */
  protected postInitialize(): void {
    super.postInitialize();
    console.log(
      "‚úÖ OriginValleyScene: Basic setup completed with StandardRules"
    );
  }
}

// phaser/scenes/platformer/rules/StandardRules.ts
import { IPlatformerRules } from "./IPlatformerRules";
import { MinigameCore } from "../../../classes";
import { BasePlatformerScene } from "../BasePlatformerScene";

/**
 * B·ªô quy t·∫Øc ti√™u chu·∫©n, ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi h·∫ßu h·∫øt c√°c m√†n ch∆°i.
 * - Xu: +10 ƒëi·ªÉm.
 * - V·ªÅ ƒë√≠ch: +50 ƒëi·ªÉm v√† k√≠ch ho·∫°t quiz.
 */
export class StandardRules implements IPlatformerRules {
  private minigameCore!: MinigameCore;
  private scene!: BasePlatformerScene;
  private startTime: number = 0;

  initialize(scene: BasePlatformerScene, minigameCore: MinigameCore): void {
    this.scene = scene;
    this.minigameCore = minigameCore;
    // Start the time trial when rules are initialized
    this.startTime = scene.time.now;
    console.log(
      `üéØ StandardRules: Time trial started at ${this.startTime} for ${scene.scene.key}`
    );
  }

  handleCollectible(
    tile: Phaser.Tilemaps.Tile,
    scene: BasePlatformerScene
  ): void {
    if (tile.properties?.name === "xu" || tile.properties?.type === "coin") {
      // Coins are decorative in time-trial mode. Keep sound/FX only.
      scene.sound.play("coin");
      console.log(`üí∞ StandardRules: Collected coin (decorative, no score)`);
    }

    // X·ª≠ l√Ω c√°c v·∫≠t ph·∫©m kh√°c n·∫øu c·∫ßn
    if (tile.properties?.name === "gem") {
      scene.sound.play("coin"); // Ho·∫∑c "gem" sound n·∫øu c√≥

      const score = tile.properties?.value || 25;
      this.minigameCore.addScore(score);
      console.log(`üíé StandardRules: Collected gem (+${score} points)`);
    }

    if (tile.properties?.name === "powerup") {
      scene.sound.play("powerup", { volume: 0.7 });

      const score = tile.properties?.value || 20;
      this.minigameCore.addScore(score);
      console.log(`‚ö° StandardRules: Collected powerup (+${score} points)`);
    }

    if (tile.properties?.type === "trap") {
      scene.sound.play("trap", { volume: 0.8 });

      const penalty = tile.properties?.penalty || 5;
      this.minigameCore.subtractScore(penalty);
      console.log(`üï≥Ô∏è StandardRules: Hit trap (-${penalty} points)`);
    }
  }

  handleInteractiveObject(
    objectName: string,
    objectData: any,
    scene: BasePlatformerScene
  ): void {
    console.log(`üéÆ StandardRules: Handling object "${objectName}"`);

    if (objectName.includes("finish") || objectName.includes("level_end")) {
      // Compute elapsed time and convert to score (time trial)
      const endTime = scene.time.now;
      const elapsedSeconds = (endTime - this.startTime) / 1000;

      const baseScore = 1000;
      const penaltyPerSecond = 10;
      const timePenalty = Math.floor(elapsedSeconds * penaltyPerSecond);
      const finalScore = Math.max(50, baseScore - timePenalty);

      console.log(
        `üèÅ StandardRules: Level completed in ${elapsedSeconds.toFixed(2)}s.`
      );
      console.log(`   - Time Penalty: ${timePenalty}`);
      console.log(`   - Final Score: ${finalScore}`);

      scene.sound.play("coin", { volume: 0.8 });

      this.minigameCore.addScore(finalScore);
      this.minigameCore.triggerQuiz();
    }
    // TH√äM M·ªöI: X·ª≠ l√Ω logic cho checkpoint
    else if (objectName.includes("checkpoint")) {
      // V·ªã tr√≠ c·ªßa checkpoint object. Ch√∫ √Ω Tiled c√≥ g·ªëc t·ªça ƒë·ªô Y ·ªü ƒë√°y object.
      const checkpointX = objectData.x + objectData.width / 2;
      const checkpointY = objectData.y - objectData.height / 2;

      // Y√™u c·∫ßu scene c·∫≠p nh·∫≠t v·ªã tr√≠ checkpoint
      // Ch√∫ng ta truy·ªÅn v√†o object ƒë·ªÉ d·ªÖ d√†ng m·ªü r·ªông sau n√†y
      const checkpointActivated = scene.setCheckpoint({
        x: checkpointX,
        y: checkpointY,
      });

      // Ch·ªâ c·ªông ƒëi·ªÉm v√† ch∆°i √¢m thanh n·∫øu ƒë√¢y l√† l·∫ßn ƒë·∫ßu k√≠ch ho·∫°t checkpoint
      if (checkpointActivated) {
        const checkpointBonus = objectData.properties?.checkpointBonus || 5;
        this.minigameCore.addScore(checkpointBonus);
        console.log(
          `üö© StandardRules: Checkpoint activated (+${checkpointBonus} points) at (${checkpointX}, ${checkpointY})`
        );
      }
    } else if (objectName.includes("secret")) {
      scene.sound.play("secret", { volume: 0.8 });

      const secretBonus = objectData.properties?.secretBonus || 30;
      this.minigameCore.addScore(secretBonus);
      console.log(
        `üîç StandardRules: Secret area found (+${secretBonus} bonus)`
      );
    }
  }

  // TH√äM M·ªöI: Tri·ªÉn khai ph∆∞∆°ng th·ª©c x·ª≠ l√Ω va ch·∫°m v·ªõi v·∫≠t nguy hi·ªÉm
  handleHazardCollision(
    tile: Phaser.Tilemaps.Tile,
    scene: BasePlatformerScene
  ): void {
    console.log("üí• StandardRules: Player hit a hazard!");

    // Ch∆°i √¢m thanh (t√°i s·ª≠ d·ª•ng √¢m thanh 'trap' ho·∫∑c th√™m √¢m thanh m·ªõi)
    scene.sound.play("hurt", { volume: 1.0, rate: 0.9 });

    console.log(`üíÄ Player penalized for hitting a hazard`);
  }

  cleanup(): void {
    console.log(`üßπ StandardRules: Cleaning up`);
    // Kh√¥ng c·∫ßn d·ªçn d·∫πp g√¨ ƒë·∫∑c bi·ªát trong b·ªô quy t·∫Øc ti√™u chu·∫©n n√†y
  }
}

import * as Phaser from "phaser";
import { GAME_CONFIG } from "./constants";
import { PreloadScene } from "../scenes/PreloadScene";
import { ForestScene, DesertScene } from "../scenes/platformer";

/**
 * üéÆ T·∫†O C·∫§U H√åNH PHASER GAME
 *
 * CH·ª®C NƒÇNG:
 * - T·∫°o config cho Phaser.Game instance
 * - Setup responsive full screen
 * - C·∫•u h√¨nh physics (gravity, collision)
 * - ƒê·ªãnh nghƒ©a th·ª© t·ª± scenes
 *
 * @param parent - ID c·ªßa DOM element ch·ª©a game
 * @returns Phaser game configuration object
 */
export const createGameConfig = (
  parent: string
): Phaser.Types.Core.GameConfig => {
  return {
    // === C·∫§U H√åNH C∆† B·∫¢N ===
    type: Phaser.AUTO, // T·ª± ƒë·ªông ch·ªçn WebGL ho·∫∑c Canvas
    width: "100%", // Full width responsive
    height: "100%", // Full height responsive
    parent: parent, // DOM container element
    backgroundColor: GAME_CONFIG.BACKGROUND_COLOR, // Sky blue background

    // === C·∫§U H√åNH RESPONSIVE ===
    scale: {
      mode: Phaser.Scale.RESIZE, // T·ª± ƒë·ªông resize theo container
      autoCenter: Phaser.Scale.CENTER_BOTH, // Center game trong container
      width: "100%",
      height: "100%",
      zoom: 1, // Kh√¥ng zoom, gi·ªØ t·ª∑ l·ªá g·ªëc
    },

    // === DANH S√ÅCH SCENES (th·ª© t·ª± ch·∫°y) ===
    scene: [PreloadScene, ForestScene, DesertScene], // PreloadScene ‚Üí Random(ForestScene/DesertScene)

    // === C·∫§U H√åNH PHYSICS ===
    physics: {
      default: "arcade", // S·ª≠ d·ª•ng Arcade Physics (ƒë∆°n gi·∫£n, nhanh)
      arcade: {
        gravity: { y: 800, x: 0 }, // Tr·ªçng l·ª±c h∆∞·ªõng xu·ªëng (800 = m·∫°nh)
        debug: false, // T·∫Øt debug graphics (b·∫≠t = true ƒë·ªÉ debug)
      },
    },

    // === C·∫§U H√åNH RENDER ===
    render: {
      antialias: true, // B·∫≠t antialias cho ƒë·ªì h·ªça m∆∞·ª£t
      pixelArt: false, // T·∫Øt pixel art mode (b·∫≠t n·∫øu d√πng pixel art)
      powerPreference: "high-performance", // ∆Øu ti√™n GPU m·∫°nh ƒë·ªÉ render
      clearBeforeRender: true, // Clear canvas tr∆∞·ªõc m·ªói frame
      preserveDrawingBuffer: false, // T·ªëi ∆∞u performance
      failIfMajorPerformanceCaveat: false, // Cho ph√©p fallback
      // Th√™m config cho text rendering t·ªët h∆°n
      transparent: false, // Kh√¥ng c·∫ßn transparency cho background
      roundPixels: true, // L√†m tr√≤n pixel ƒë·ªÉ text s·∫Øc n√©t h∆°n
    },
  };
};

import { SCENE_KEYS } from "../../config/constants";

/**
 * üé¨ SCENE MANAGER - Qu·∫£n l√Ω vi·ªác ch·ªçn scene random v√† th√¥ng tin scene
 *
 * CH·ª®C NƒÇNG:
 * - Centralized random scene selection logic (FALLBACK - ch√≠nh th·ª©c d√πng SeededSceneSelector)
 * - Scene information v√† validation utilities
 * - Scene transition logging
 *
 * NOTE: RoundManager gi·ªù s·ª≠ d·ª•ng SeededSceneSelector ƒë·ªÉ ƒë·∫£m b·∫£o consistent random
 */
export class SceneManager {
  // Danh s√°ch c√°c gameplay scenes c√≥ th·ªÉ random
  private static readonly GAMEPLAY_SCENES = [
    SCENE_KEYS.ORIGIN_VALLEY,
    SCENE_KEYS.TEMPEST_PEAK,
    SCENE_KEYS.WHISPERING_CAVERNS,
  ] as const;

  /**
   * üé≤ RANDOM GAMEPLAY SCENE - Ch·ªçn ng·∫´u nhi√™n 1 trong c√°c scene ch∆°i
   *
   * @param excludeScene - Scene c·∫ßn lo·∫°i tr·ª´ (optional)
   * @returns Scene key ƒë∆∞·ª£c ch·ªçn random
   */
  public static getRandomGameplayScene(excludeScene?: string): string {
    let availableScenes = [...this.GAMEPLAY_SCENES];

    // Lo·∫°i tr·ª´ scene n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    if (excludeScene) {
      availableScenes = availableScenes.filter(
        (scene) => scene !== excludeScene
      );
    }

    // N·∫øu kh√¥ng c√≤n scene n√†o sau khi lo·∫°i tr·ª´, d√πng t·∫•t c·∫£
    if (availableScenes.length === 0) {
      availableScenes = [...this.GAMEPLAY_SCENES];
    }

    const randomIndex = Math.floor(Math.random() * availableScenes.length);
    return availableScenes[randomIndex];
  }

  /**
   * üéÆ GET ALL GAMEPLAY SCENES - L·∫•y danh s√°ch t·∫•t c·∫£ gameplay scenes
   *
   * @returns Array c√°c scene keys (readonly)
   */
  public static getAllGameplayScenes(): readonly string[] {
    return this.GAMEPLAY_SCENES;
  }

  /**
   * üìä GET SCENE INFO - L·∫•y th√¥ng tin v·ªÅ scene
   *
   * @param sceneKey - Key c·ªßa scene
   * @returns Object ch·ª©a th√¥ng tin scene
   */
  public static getSceneInfo(sceneKey: string): {
    name: string;
    description: string;
  } {
    switch (sceneKey) {
      case SCENE_KEYS.ORIGIN_VALLEY:
        return {
          name: "Origin Valley",
          description: "Thung l≈©ng kh·ªüi ngu·ªìn v·ªõi ƒë·ªãa h√¨nh ƒëa d·∫°ng.",
        };
      case SCENE_KEYS.TEMPEST_PEAK:
        return {
          name: "Tempest Peak",
          description: "Chinh ph·ª•c ƒë·ªânh n√∫i cao trong gi√≥ b√£o.",
        };
      case SCENE_KEYS.WHISPERING_CAVERNS:
        return {
          name: "Whispering Caverns",
          description: "Kh√°m ph√° hang ƒë·ªông t·ªëi tƒÉm ch·ªâ v·ªõi √°nh ƒëu·ªëc leo l√©t.",
        };
      case SCENE_KEYS.PRELOAD:
        return {
          name: "Loading Scene",
          description: "M√†n h√¨nh loading assets",
        };

      // Legacy support (deprecated)
      case SCENE_KEYS.GAME:
        return {
          name: "Forest Level (Legacy)",
          description: "R·ª´ng xanh - phi√™n b·∫£n c≈© (deprecated)",
        };

      default:
        return {
          name: "Unknown Scene",
          description: "Scene kh√¥ng x√°c ƒë·ªãnh",
        };
    }
  }

  /**
   * üìù LOG SCENE TRANSITION - Log th√¥ng tin chuy·ªÉn scene
   *
   * @param fromScene - Scene hi·ªán t·∫°i
   * @param toScene - Scene ƒë√≠ch
   * @param reason - L√Ω do chuy·ªÉn scene
   */
  public static logSceneTransition(
    fromScene: string,
    toScene: string,
    reason: string
  ): void {
    const fromInfo = this.getSceneInfo(fromScene);
    const toInfo = this.getSceneInfo(toScene);

    console.log(
      `üé¨ Scene Transition: ${fromInfo.name} ‚Üí ${toInfo.name} (${reason})`
    );
  }

  /**
   * ‚úÖ VALIDATE SCENE KEY - Ki·ªÉm tra scene key c√≥ h·ª£p l·ªá kh√¥ng
   *
   * @param sceneKey - Scene key c·∫ßn ki·ªÉm tra
   * @returns true n·∫øu h·ª£p l·ªá
   */
  public static isValidSceneKey(sceneKey: string): boolean {
    return Object.values(SCENE_KEYS).includes(sceneKey as any);
  }
}

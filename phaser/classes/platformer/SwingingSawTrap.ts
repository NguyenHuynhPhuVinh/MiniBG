import { BasePlatformerScene } from "../../scenes";

/**
 * ü™ö SWINGING SAW TRAP - B·∫´y rƒÉng c∆∞a xoay tr√≤n v·ªõi d√¢y x√≠ch
 *
 * L·ªõp n√†y t·∫°o ra m·ªôt b·∫´y ph·ª©c t·∫°p s·ª≠ d·ª•ng v·∫≠t l√Ω Matter.js:
 * - ƒêi·ªÉm neo tƒ©nh (anchor point)
 * - L∆∞·ª°i c∆∞a ƒë·ªông ƒë∆∞·ª£c n·ªëi v·ªõi ƒëi·ªÉm neo b·∫±ng constraint (d√¢y x√≠ch)
 * - Hi·ªáu ·ª©ng h√¨nh ·∫£nh d√¢y x√≠ch ƒë∆∞·ª£c v·∫Ω b·∫±ng Graphics
 * - Va ch·∫°m v·ªõi ng∆∞·ªùi ch∆°i g√¢y ch·∫øt ngay l·∫≠p t·ª©c
 *
 * TR√ÅCH NHI·ªÜM:
 * - T·∫°o v√† qu·∫£n l√Ω c√°c v·∫≠t th·ªÉ Matter.js (anchor, saw blade, constraint)
 * - C·∫≠p nh·∫≠t h√¨nh ·∫£nh d√¢y x√≠ch m·ªói frame
 * - √Åp d·ª•ng lighting pipeline n·∫øu scene h·ªó tr·ª£
 * - D·ªçn d·∫πp t√†i nguy√™n khi b·ªã destroy
 */
export class SwingingSawTrap {
  private scene: BasePlatformerScene;
  private anchorSprite: Phaser.GameObjects.Image;
  private sawBladeSprite: Phaser.Physics.Matter.Image;
  private chainGraphics: Phaser.GameObjects.Graphics | null = null; // THAY ƒê·ªîI 1: D√πng Graphics cho d√¢y x√≠ch m√†u n√¢u
  private constraint: MatterJS.ConstraintType;
  private anchorBody: MatterJS.BodyType;
  private motorEvent: Phaser.Time.TimerEvent | null = null; // ƒê·ªÉ d·ªçn d·∫πp timer
  private sawProxy: Phaser.Physics.Arcade.Sprite | null = null; // TH√äM M·ªöI: Arcade proxy cho va ch·∫°m

  constructor(
    scene: BasePlatformerScene,
    x: number, // V·ªã tr√≠ neo X
    y: number, // V·ªã tr√≠ neo Y
    // THAY ƒê·ªîI 2: Nh·∫≠n th√™m c√°c tham s·ªë m·ªõi t·ª´ WorldBuilder
    anchorWidth: number,
    anchorHeight: number,
    chainLength: number = 200, // Chi·ªÅu d√†i d√¢y x√≠ch
    angularVelocity: number = 1.0, // T·ªëc ƒë·ªô quay ban ƒë·∫ßu
    motorSpeed: number = 0.02 // T·ªëc ƒë·ªô c·ªßa motor quay 360 ƒë·ªô
  ) {
    this.scene = scene;

    console.log(
      `ü™ö Creating SwingingSawTrap at (${x}, ${y}) with chain length ${chainLength}, motor speed ${motorSpeed}`
    );

    // 1. T·∫†O ƒêI·ªÇM NEO (V·∫¨T L√ù) - Tƒ©nh, kh√¥ng di chuy·ªÉn
    this.anchorBody = this.scene.matter.add.circle(x, y, 10, {
      isStatic: true,
      label: "trap_anchor",
    });

    // 2. T·∫†O L∆Ø·ª†I C∆ØA (H√åNH ·∫¢NH + V·∫¨T L√ù) - ƒê·ªông
    const sawInitialY = y + chainLength;
    this.sawBladeSprite = this.scene.matter.add.image(
      x,
      sawInitialY,
      "saw",
      undefined,
      {
        shape: { type: "circle", radius: 32 }, // Hitbox h√¨nh tr√≤n
        label: "saw_blade_hazard", // Label ƒë·ªÉ nh·∫≠n di·ªán va ch·∫°m
      }
    );

    // THAY ƒê·ªîI 3: V√î HI·ªÜU H√ìA MA S√ÅT ƒê·ªÇ L∆Ø·ª†I C∆ØA QUAY M√ÉI M√ÉI
    this.sawBladeSprite.setFrictionAir(0);
    this.sawBladeSprite.setFriction(0);
    this.sawBladeSprite.setCircle(32);
    this.sawBladeSprite.setDepth(50); // ƒê·∫£m b·∫£o n√≥ render tr√™n c√°c layer kh√°c

    // ƒê·∫∑t t·ªëc ƒë·ªô quay cho ch√≠nh l∆∞·ª°i c∆∞a
    this.scene.matter.body.setAngularVelocity(
      this.sawBladeSprite.body as MatterJS.BodyType,
      angularVelocity
    );

    // 3. T·∫†O R√ÄNG BU·ªòC (D√ÇY X√çCH V·∫¨T L√ù)
    this.constraint = this.scene.matter.add.constraint(
      this.anchorBody,
      this.sawBladeSprite.body as MatterJS.BodyType,
      chainLength,
      0.1 // Stiffness: ƒë·ªô c·ª©ng c·ªßa x√≠ch (gi√° tr·ªã th·∫•p = gi·ªëng d√¢y h∆°n)
    );

    // THAY ƒê·ªîI 4: Th√™m motor ri√™ng bi·ªát ƒë·ªÉ quay 360 ƒë·ªô
    // S·ª≠ d·ª•ng c√°ch ti·∫øp c·∫≠n kh√°c: √°p d·ª•ng l·ª±c li√™n t·ª•c ƒë·ªÉ t·∫°o chuy·ªÉn ƒë·ªông quay
    this.motorEvent = this.scene.time.addEvent({
      delay: 16, // ~60 FPS
      callback: () => {
        if (this.sawBladeSprite && this.sawBladeSprite.body) {
          // √Åp d·ª•ng l·ª±c ti·∫øp tuy·∫øn ƒë·ªÉ t·∫°o chuy·ªÉn ƒë·ªông quay tr√≤n
          const body = this.sawBladeSprite.body as MatterJS.BodyType;
          const centerX = this.anchorBody.position.x;
          const centerY = this.anchorBody.position.y;

          // T√≠nh vector t·ª´ t√¢m ƒë·∫øn l∆∞·ª°i c∆∞a
          const dx = body.position.x - centerX;
          const dy = body.position.y - centerY;

          // T·∫°o l·ª±c vu√¥ng g√≥c (ti·∫øp tuy·∫øn) ƒë·ªÉ quay (gi·∫£m l·ª±c ƒë·ªÉ ·ªïn ƒë·ªãnh h∆°n)
          const forceX = -dy * motorSpeed * 0.1;
          const forceY = dx * motorSpeed * 0.1;

          this.scene.matter.body.applyForce(body, body.position, {
            x: forceX,
            y: forceY,
          });
        }
      },
      loop: true,
    });

    // 4. T·∫†O H√åNH ·∫¢NH TR·ª∞C QUAN

    // THAY ƒê·ªîI 5: T·∫°o d√¢y x√≠ch b·∫±ng Graphics m√†u n√¢u
    this.chainGraphics = this.scene.add.graphics();
    this.chainGraphics.setDepth(49);

    // THAY ƒê·ªîI 6: T·∫°o sprite cho ƒëi·ªÉm neo v√† set k√≠ch th∆∞·ªõc ch√≠nh x√°c
    this.anchorSprite = this.scene.add.image(x, y, "chain");
    this.anchorSprite.setDisplaySize(anchorWidth, anchorHeight); // Kh√¥ng d√πng setScale n·ªØa!
    this.anchorSprite.setDepth(51);

    // TH√äM M·ªöI: T·∫°o Arcade Physics proxy cho l∆∞·ª°i c∆∞a (nh∆∞ bomb)
    this.sawProxy = this.scene.physics.add.sprite(
      this.sawBladeSprite.x,
      this.sawBladeSprite.y,
      "saw"
    );
    this.sawProxy.setVisible(false); // ·∫®n proxy, ch·ªâ d√πng ƒë·ªÉ va ch·∫°m
    const proxyBody = this.sawProxy.body as Phaser.Physics.Arcade.Body;
    proxyBody.setAllowGravity(false); // Kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi tr·ªçng l·ª±c
    proxyBody.setCircle(32); // Hitbox tr√≤n nh∆∞ l∆∞·ª°i c∆∞a

    // DELAY setup collider cho ƒë·∫øn khi player s·∫µn s√†ng
    this.setupColliderWhenReady();

    console.log(`‚úÖ SwingingSawTrap created successfully`);
  }

  /**
   * Setup collider khi player ƒë√£ s·∫µn s√†ng
   * Retry m·ªói 100ms cho ƒë·∫øn khi t√¨m th·∫•y player
   */
  private setupColliderWhenReady(): void {
    const trySetupCollider = () => {
      const player = this.scene.getPlayer?.()?.getSprite?.();

      if (player && this.sawProxy) {
        this.scene.physics.add.collider(player, this.sawProxy, () => {
          const already = this.sawProxy?.getData("triggered") === true;
          if (!already && this.sawProxy) {
            this.sawProxy.setData("triggered", true);

            // G·ªçi handlePlayerDeathByHazard nh∆∞ bomb
            this.scene.handlePlayerDeathByHazard({ name: "swinging_saw" });

            // Reset trigger sau 1 gi√¢y ƒë·ªÉ c√≥ th·ªÉ va ch·∫°m l·∫°i
            this.scene.time.delayedCall(1000, () => {
              if (this.sawProxy) {
                this.sawProxy.setData("triggered", false);
              }
            });
          }
        });
      } else {
        // Retry sau 100ms
        this.scene.time.delayedCall(100, trySetupCollider);
      }
    };

    trySetupCollider();
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫´y m·ªói frame
   * - V·∫Ω l·∫°i d√¢y x√≠ch theo v·ªã tr√≠ hi·ªán t·∫°i c·ªßa c√°c v·∫≠t th·ªÉ
   * - √Åp d·ª•ng lighting pipeline n·∫øu c√≥
   */
  public update(): void {
    // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c m·∫Øt x√≠ch theo chuy·ªÉn ƒë·ªông c·ªßa l∆∞·ª°i c∆∞a
    const anchorX = this.constraint.bodyA?.position.x || 0;
    const anchorY = this.constraint.bodyA?.position.y || 0;
    const sawX = this.constraint.bodyB?.position.x || 0;
    const sawY = this.constraint.bodyB?.position.y || 0;

    // C·∫≠p nh·∫≠t Graphics d√¢y x√≠ch
    if (this.chainGraphics) {
      this.chainGraphics.clear();

      // M√†u n√¢u ƒë·∫≠m nh∆∞ d√¢y th·ª´ng th·∫≠t
      this.chainGraphics.lineStyle(8, 0x8b4513, 1); // M√†u n√¢u, ƒë·ªô d√†y 8px

      // V·∫Ω d√¢y v·ªõi hi·ªáu ·ª©ng cong t·ª± nhi√™n (catenary curve)
      this.chainGraphics.beginPath();
      this.chainGraphics.moveTo(anchorX, anchorY);

      const segments = 8;
      for (let i = 1; i <= segments; i++) {
        const t = i / segments;
        let px = anchorX + (sawX - anchorX) * t;
        let py = anchorY + (sawY - anchorY) * t;

        // Th√™m hi·ªáu ·ª©ng cong t·ª± nhi√™n (catenary curve)
        if (i > 0 && i < segments) {
          const sag = 15; // ƒê·ªô v√µng c·ªßa d√¢y
          py += sag * Math.sin(t * Math.PI);
        }

        this.chainGraphics.lineTo(px, py);
      }

      this.chainGraphics.strokePath();
    }

    // C·∫≠p nh·∫≠t v·ªã tr√≠ Arcade proxy theo Matter sprite
    if (this.sawProxy) {
      this.sawProxy.setPosition(sawX, sawY);
    }

    // √Åp d·ª•ng pipeline √°nh s√°ng n·∫øu scene c√≥ h·ªó tr·ª£
    if (this.scene.isLightingEnabled()) {
      this.sawBladeSprite.setPipeline("Light2D");
      this.anchorSprite.setPipeline("Light2D");
      if (this.chainGraphics) {
        this.chainGraphics.setPipeline("Light2D");
      }
    }
  }

  /**
   * D·ªçn d·∫πp t√†i nguy√™n khi b·∫´y b·ªã h·ªßy
   * R·∫•t quan tr·ªçng: ph·∫£i d·ªçn d·∫πp v·∫≠t th·ªÉ Matter.js ƒë·ªÉ tr√°nh memory leak
   */
  public destroy(): void {
    // D·ªçn d·∫πp timer event
    if (this.motorEvent) {
      this.motorEvent.destroy();
      this.motorEvent = null;
    }

    // D·ªçn d·∫πp v·∫≠t th·ªÉ Matter.js
    this.scene.matter.world.remove(this.constraint);

    // D·ªçn d·∫πp Arcade proxy
    if (this.sawProxy) {
      this.sawProxy.destroy();
      this.sawProxy = null;
    }

    // D·ªçn d·∫πp sprites v√† chain graphics
    this.sawBladeSprite.destroy();
    this.anchorSprite.destroy();
    if (this.chainGraphics) {
      this.chainGraphics.destroy();
      this.chainGraphics = null;
    }
  }

  /**
   * L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa l∆∞·ª°i c∆∞a (ƒë·ªÉ debug ho·∫∑c ki·ªÉm tra)
   */
  public getSawPosition(): { x: number; y: number } {
    const body = this.sawBladeSprite.body as MatterJS.BodyType;
    return { x: body.position.x, y: body.position.y };
  }

  /**
   * L·∫•y sprite c·ªßa l∆∞·ª°i c∆∞a (ƒë·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i n·∫øu c·∫ßn)
   */
  public getSawSprite(): Phaser.Physics.Matter.Image {
    return this.sawBladeSprite;
  }
}

/**
 * üñºÔ∏è CHARACTER FRAME DEFINITIONS - H·ªá th·ªëng frame th·ªß c√¥ng cho spritesheet
 *
 * CH·ª®C NƒÇNG:
 * - ƒê·ªãnh nghƒ©a v·ªã tr√≠ frames trong spritesheet 128x128 kh√¥ng theo th·ª© t·ª± logic
 * - Cung c·∫•p helper functions ƒë·ªÉ t·∫°o frame data d·ªÖ d√†ng
 * - H·ªó tr·ª£ nhi·ªÅu characters v·ªõi animations kh√°c nhau
 */

// === INTERFACES ===
export interface FrameData {
  x: number; // T·ªça ƒë·ªô X trong spritesheet (pixel)
  y: number; // T·ªça ƒë·ªô Y trong spritesheet (pixel)
  width: number; // Chi·ªÅu r·ªông frame (th∆∞·ªùng 128)
  height: number; // Chi·ªÅu cao frame (th∆∞·ªùng 128)
}

export interface CharacterAnimations {
  idle: FrameData[]; // Frames cho animation ƒë·ª©ng y√™n
  walk: FrameData[]; // Frames cho animation ƒëi b·ªô
  jump: FrameData[]; // Frames cho animation nh·∫£y
  fall: FrameData[]; // Frames cho animation r∆°i
}

// === HELPER FUNCTIONS ===

/**
 * üìç T·∫†O FRAME T·ª™ V·ªä TR√ç GRID
 * @param col - C·ªôt trong grid (b·∫Øt ƒë·∫ßu t·ª´ 0)
 * @param row - H√†ng trong grid (b·∫Øt ƒë·∫ßu t·ª´ 0)
 * @param frameSize - K√≠ch th∆∞·ªõc m·ªói frame (default: 128)
 * @returns FrameData v·ªõi t·ªça ƒë·ªô pixel ch√≠nh x√°c
 */
export function frameAt(
  col: number,
  row: number,
  frameSize: number = 128
): FrameData {
  return {
    x: col * frameSize,
    y: row * frameSize,
    width: frameSize,
    height: frameSize,
  };
}

/**
 * üìç T·∫†O NHI·ªÄU FRAMES T·ª™ DANH S√ÅCH V·ªä TR√ç
 * @param positions - M·∫£ng [col, row] positions
 * @param frameSize - K√≠ch th∆∞·ªõc m·ªói frame (default: 128)
 * @returns M·∫£ng FrameData
 */
export function framesAt(
  positions: [number, number][],
  frameSize: number = 128
): FrameData[] {
  return positions.map(([col, row]) => frameAt(col, row, frameSize));
}

// === H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ===
// frameAt(col, row) - T·∫°o 1 frame t·∫°i v·ªã tr√≠ c·ªôt, h√†ng (b·∫Øt ƒë·∫ßu t·ª´ 0)
// framesAt([[col1, row1], [col2, row2], ...]) - T·∫°o nhi·ªÅu frames
//
// V√ç D·ª§:
// frameAt(0, 0) = frame ·ªü g√≥c tr√°i tr√™n
// frameAt(1, 0) = frame c·ªôt 2, h√†ng 1
// framesAt([[0,0], [2,1], [4,0]]) = 3 frames ·ªü c√°c v·ªã tr√≠ kh√°c nhau

// === CHARACTER DEFINITIONS ===

/**
 * üü† ORANGE CHARACTER - Character ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong game
 * Frames ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh theo spritesheet th·ª±c t·∫ø
 */
export const ORANGE_CHARACTER: CharacterAnimations = {
  idle: [frameAt(0, 3)], // ƒê·ª©ng y√™n
  walk: framesAt([
    // Animation ƒëi b·ªô
    [0, 1], // Frame 1
    [0, 0], // Frame 2
    [0, 3], // Quay v·ªÅ idle
  ]),
  jump: [frameAt(0, 2)], // Nh·∫£y l√™n
  fall: [frameAt(0, 4)], // R∆°i xu·ªëng
};

/**
 * üü£ PURPLE CHARACTER - Character ph·ª• (c√≥ th·ªÉ d√πng ƒë·ªÉ thay ƒë·ªïi)
 */
export const PURPLE_CHARACTER: CharacterAnimations = {
  idle: [frameAt(0, 2)],
  walk: framesAt([
    [1, 2],
    [2, 2],
    [3, 2],
    [0, 2],
  ]),
  jump: [frameAt(4, 2)],
  fall: [frameAt(5, 2)],
};

/**
 * üü¢ GREEN CHARACTER - Character ph·ª• (c√≥ th·ªÉ d√πng ƒë·ªÉ thay ƒë·ªïi)
 */
export const GREEN_CHARACTER: CharacterAnimations = {
  idle: [frameAt(0, 4)],
  walk: framesAt([
    [1, 4],
    [2, 4],
    [3, 4],
    [0, 4],
  ]),
  jump: [frameAt(4, 4)],
  fall: [frameAt(5, 4)],
};

/**
 * ü©∑ PINK CHARACTER - Character ph·ª• (c√≥ th·ªÉ d√πng ƒë·ªÉ thay ƒë·ªïi)
 */
export const PINK_CHARACTER: CharacterAnimations = {
  idle: [frameAt(0, 3)],
  walk: framesAt([
    [1, 3],
    [2, 3],
    [3, 3],
    [0, 3],
  ]),
  jump: [frameAt(4, 3)],
  fall: [frameAt(5, 3)],
};

// === EXPORTS ===

/**
 * üì¶ T·∫§T C·∫¢ CHARACTERS - Object ch·ª©a t·∫•t c·∫£ character definitions
 */
export const CHARACTERS = {
  ORANGE: ORANGE_CHARACTER, // Character ch√≠nh
  PURPLE: PURPLE_CHARACTER, // Character ph·ª•
  GREEN: GREEN_CHARACTER, // Character ph·ª•
  PINK: PINK_CHARACTER, // Character ph·ª•
} as const;

/**
 * üéØ DEFAULT CHARACTER - Character ƒë∆∞·ª£c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
 */
export const DEFAULT_CHARACTER = CHARACTERS.ORANGE;

/**
 * ‚öôÔ∏è C·∫§U H√åNH ANIMATION - Settings cho walk animation
 */
export const ANIMATION_CONFIG = {
  frameRate: 8, // 8 FPS cho walk animation (m∆∞·ª£t m√†)
  repeat: -1, // L·∫∑p v√¥ h·∫°n
  yoyo: false, // Kh√¥ng reverse animation
} as const;

/**
 * üìè K√çCH TH∆Ø·ªöC FRAME - K√≠ch th∆∞·ªõc chu·∫©n c·ªßa m·ªói character frame
 */
export const CHARACTER_FRAME_SIZE = {
  width: 128, // Chi·ªÅu r·ªông frame
  height: 128, // Chi·ªÅu cao frame
} as const;

// === H∆Ø·ªöNG D·∫™N DEBUGGING ===
// üîß C√ÅCH DEBUG KHI FRAME HI·ªÇN TH·ªä SAI:
// 1. M·ªü game v√† xem character hi·ªÉn th·ªã frame n√†o
// 2. N·∫øu sai, thay ƒë·ªïi s·ªë trong frameAt(col, row)
// 3. Col = c·ªôt (0,1,2,3,4,5...), Row = h√†ng (0,1,2,3,4,5...)
// 4. L∆∞u file v√† reload game ƒë·ªÉ test
//
// V√ç D·ª§:
// - Idle frame sai: thay frameAt(0, 0) ‚Üí frameAt(1, 0) ho·∫∑c frameAt(0, 1)
// - Walk animation sai: thay ƒë·ªïi c√°c s·ªë trong framesAt([...])
//
// üìù TEMPLATE T·∫†O CHARACTER M·ªöI:
// export const NEW_CHARACTER: CharacterAnimations = {
//   idle: [frameAt(col, row)],
//   walk: framesAt([[col1, row1], [col2, row2], [col3, row3], [col4, row4]]),
//   jump: [frameAt(col, row)],
//   fall: [frameAt(col, row)]
// };

import { Scene } from "phaser";

/**
 * üéÆ INPUT STATE INTERFACE - Tr·∫°ng th√°i t·∫•t c·∫£ input keys
 */
export interface InputState {
  left: boolean; // ‚Üê ho·∫∑c A
  right: boolean; // ‚Üí ho·∫∑c D
  up: boolean; // ‚Üë ho·∫∑c W
  down: boolean; // ‚Üì ho·∫∑c S
  jump: boolean; // Space ho·∫∑c ‚Üë ho·∫∑c W
  grab: boolean; // E - H√†nh ƒë·ªông n·∫Øm ng∆∞·ªùi ch∆°i kh√°c
  carry: boolean; // F - H√†nh ƒë·ªông b·∫ø/n√©m ng∆∞·ªùi ch∆°i kh√°c
}

/**
 * üéÆ INPUT MANAGER - Qu·∫£n l√Ω t·∫•t c·∫£ input t·ª´ b√†n ph√≠m (PC only)
 *
 * CH·ª®C NƒÇNG:
 * - H·ªó tr·ª£ Arrow keys v√† WASD
 * - Space key cho jump
 * - Cung c·∫•p input state cho Player class
 * - H·ªó tr·ª£ JustPressed detection cho jump buffering
 */
export class InputManager {
  private scene: Scene;
  private cursors?: Phaser.Types.Input.Keyboard.CursorKeys; // Arrow keys
  private wasdKeys?: any; // WASD keys
  private spaceKey?: Phaser.Input.Keyboard.Key; // Space key
  private grabKey?: Phaser.Input.Keyboard.Key; // E key cho grab
  private carryKey?: Phaser.Input.Keyboard.Key; // F key cho carry/throw
  private inputState: InputState = {
    left: false,
    right: false,
    up: false,
    down: false,
    jump: false,
    grab: false,
    carry: false,
  };

  // TH√äM M·ªöI: State d√†nh cho input tr√™n thi·∫øt b·ªã di ƒë·ªông
  public mobileState: InputState = {
    left: false,
    right: false,
    up: false,
    down: false,
    jump: false,
    grab: false,
    carry: false,
  };

  // TH√äM M·ªöI: B·ªô c·ªù JustPressed cho mobile (ƒë∆∞·ª£c set t·∫°i th·ªùi ƒëi·ªÉm pointerdown)
  private mobileJustPressed: InputState = {
    left: false,
    right: false,
    up: false,
    down: false,
    jump: false,
    grab: false,
    carry: false,
  };

  constructor(scene: Scene) {
    this.scene = scene;
    this.setupKeyboardInput();
  }

  /**
   * ‚öôÔ∏è SETUP KEYBOARD INPUT - Kh·ªüi t·∫°o t·∫•t c·∫£ keys c·∫ßn thi·∫øt
   */
  private setupKeyboardInput(): void {
    // Arrow keys (‚Üê‚Üë‚Üí‚Üì)
    this.cursors = this.scene.input.keyboard?.createCursorKeys();

    // WASD keys, Space key, E key v√† F key
    if (this.scene.input.keyboard) {
      this.wasdKeys = this.scene.input.keyboard.addKeys("W,S,A,D");
      this.spaceKey = this.scene.input.keyboard.addKey(
        Phaser.Input.Keyboard.KeyCodes.SPACE
      );
      this.grabKey = this.scene.input.keyboard.addKey(
        Phaser.Input.Keyboard.KeyCodes.E
      );
      this.carryKey = this.scene.input.keyboard.addKey(
        Phaser.Input.Keyboard.KeyCodes.F
      );
    }
  }

  // TH√äM M·ªöI: API ƒë·ªÉ MobileUIHandler ghi tr·∫°ng th√°i input
  public setMobileInput(key: keyof InputState, value: boolean): void {
    if (value && !this.mobileState[key]) {
      // Rising edge -> ƒë√°nh d·∫•u v·ª´a nh·∫•n
      this.mobileJustPressed[key] = true;
    }
    this.mobileState[key] = value;
  }

  /**
   * üîÑ UPDATE INPUT STATE - ƒê∆∞·ª£c g·ªçi m·ªói frame ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i keys
   *
   * LOGIC:
   * 1. ƒê·ªçc Arrow keys
   * 2. ƒê·ªçc WASD keys (combine v·ªõi Arrow keys b·∫±ng OR)
   * 3. ƒê·ªçc Space key cho jump
   * 4. Up key c≈©ng c√≥ th·ªÉ d√πng ƒë·ªÉ jump
   *
   * @returns InputState hi·ªán t·∫°i
   */
  public update(): InputState {
    // ƒê·ªçc Arrow keys
    if (this.cursors) {
      this.inputState.left = this.cursors.left.isDown;
      this.inputState.right = this.cursors.right.isDown;
      this.inputState.up = this.cursors.up.isDown;
      this.inputState.down = this.cursors.down.isDown;
    }

    // Combine v·ªõi WASD keys (OR logic)
    if (this.wasdKeys) {
      this.inputState.left = this.inputState.left || this.wasdKeys.A.isDown;
      this.inputState.right = this.inputState.right || this.wasdKeys.D.isDown;
      this.inputState.up = this.inputState.up || this.wasdKeys.W.isDown;
      this.inputState.down = this.inputState.down || this.wasdKeys.S.isDown;
    }

    // TH√äM M·ªöI: G·ªôp v·ªõi input t·ª´ mobile
    this.inputState.left = this.inputState.left || this.mobileState.left;
    this.inputState.right = this.inputState.right || this.mobileState.right;
    this.inputState.up = this.inputState.up || this.mobileState.up;
    this.inputState.down = this.inputState.down || this.mobileState.down;

    // Space key cho jump
    if (this.spaceKey) {
      this.inputState.jump = this.spaceKey.isDown;
    }

    // Up key c≈©ng c√≥ th·ªÉ d√πng ƒë·ªÉ jump (W ho·∫∑c ‚Üë ho·∫∑c Space)
    this.inputState.jump = this.inputState.jump || this.inputState.up;

    // TH√äM M·ªöI: Jump t·ª´ mobile
    this.inputState.jump = this.inputState.jump || this.mobileState.jump;

    // ƒê·ªçc E key cho grab
    if (this.grabKey) {
      this.inputState.grab = this.grabKey.isDown;
    }

    // ƒê·ªçc F key cho carry/throw
    if (this.carryKey) {
      this.inputState.carry = this.carryKey.isDown;
    }

    // TH√äM M·ªöI: Grab t·ª´ mobile
    this.inputState.grab = this.inputState.grab || this.mobileState.grab;

    // TH√äM M·ªöI: Carry t·ª´ mobile
    this.inputState.carry = this.inputState.carry || this.mobileState.carry;

    return { ...this.inputState };
  }

  /**
   * üìä L·∫§Y INPUT STATE HI·ªÜN T·∫†I - Public method cho external access
   * @returns Copy c·ªßa InputState hi·ªán t·∫°i
   */
  public getInputState(): InputState {
    return { ...this.inputState };
  }

  /**
   * ‚ö° KI·ªÇM TRA KEY V·ª™A ƒê∆Ø·ª¢C NH·∫§N - Cho jump buffering
   *
   * CH·ª®C NƒÇNG:
   * - Ph√°t hi·ªán key v·ª´a ƒë∆∞·ª£c nh·∫•n (kh√¥ng ph·∫£i ƒëang gi·ªØ)
   * - H·ªó tr·ª£ jump buffering trong Player class
   * - Fixed: H·ªó tr·ª£ c·∫£ WASD keys ƒë·ªÉ tr√°nh √¢m thanh nh·∫£y b·ªã duplicate
   *
   * @param key - Key c·∫ßn ki·ªÉm tra
   * @returns true n·∫øu key v·ª´a ƒë∆∞·ª£c nh·∫•n
   */
  public isJustPressed(key: keyof InputState): boolean {
    // Helper ƒë·ªÉ ti√™u th·ª• c·ªù mobile just pressed (v√† reset v·ªÅ false)
    const consumeMobile = (k: keyof InputState) => {
      const was = this.mobileJustPressed[k];
      if (was) this.mobileJustPressed[k] = false;
      return was;
    };

    switch (key) {
      case "up":
      case "jump":
        return (
          (this.cursors?.up.isDown &&
            Phaser.Input.Keyboard.JustDown(this.cursors.up)) ||
          (this.wasdKeys?.W.isDown &&
            Phaser.Input.Keyboard.JustDown(this.wasdKeys.W)) ||
          (this.spaceKey?.isDown &&
            Phaser.Input.Keyboard.JustDown(this.spaceKey)) ||
          consumeMobile("jump") ||
          consumeMobile("up")
        );
      case "left":
        return (
          (this.cursors?.left.isDown &&
            Phaser.Input.Keyboard.JustDown(this.cursors.left)) ||
          (this.wasdKeys?.A.isDown &&
            Phaser.Input.Keyboard.JustDown(this.wasdKeys.A)) ||
          consumeMobile("left")
        );
      case "right":
        return (
          (this.cursors?.right.isDown &&
            Phaser.Input.Keyboard.JustDown(this.cursors.right)) ||
          (this.wasdKeys?.D.isDown &&
            Phaser.Input.Keyboard.JustDown(this.wasdKeys.D)) ||
          consumeMobile("right")
        );
      case "grab":
        return (
          (this.grabKey?.isDown &&
            Phaser.Input.Keyboard.JustDown(this.grabKey)) ||
          consumeMobile("grab")
        );
      case "carry":
        return (
          (this.carryKey?.isDown &&
            Phaser.Input.Keyboard.JustDown(this.carryKey)) ||
          consumeMobile("carry")
        );
      default:
        return consumeMobile(key);
    }
  }

  /**
   * üóëÔ∏è CLEANUP - Gi·∫£i ph√≥ng references
   */
  public destroy(): void {
    this.scene = null as any;
  }
}

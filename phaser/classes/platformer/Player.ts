import { Scene } from "phaser";
import { AnimationManager, AnimationState } from "./AnimationManager";
import { InputManager } from "./InputManager";
import { CameraManager } from "./CameraManager";
import { CharacterAnimations, DEFAULT_CHARACTER } from "./CharacterFrames";
import { NetworkManager } from "../core/NetworkManager";
import { TextUtils } from "../../utils/TextUtils"; // <-- TH√äM M·ªöI
// TH√äM M·ªöI: Import BasePlatformerScene ƒë·ªÉ c√≥ th·ªÉ g·ªçi ph∆∞∆°ng th·ª©c c·ªßa n√≥
import { BasePlatformerScene } from "../../scenes";
import { Player as PlayerStateSchema } from "../core/types/GameRoomState"; // Import schema ƒë·ªÉ type hinting
import { InterpolationUtils } from "../../utils/InterpolationUtils";

export interface PlayerConfig {
  x: number;
  y: number;
  texture: string;
  username: string; // <-- TH√äM M·ªöI
  characterData?: CharacterAnimations;
  physics?: {
    speed: number;
    jumpPower: number;
    gravity: number;
    bounce: number;
  };
}

/**
 * üèÉ PLAYER CLASS (Multiplayer-First)
 *
 * Phi√™n b·∫£n ƒë∆∞·ª£c t√°i c·∫•u tr√∫c ho√†n to√†n cho multiplayer.
 * L·ªõp n√†y kh√¥ng c√≤n ch·ª©a StateMachine hay Command Pattern.
 *
 * TR√ÅCH NHI·ªÜM:
 * - ƒê·ªçc input t·ª´ InputManager.
 * - √Åp d·ª•ng v·∫≠t l√Ω c·ª•c b·ªô ƒë·ªÉ d·ª± ƒëo√°n chuy·ªÉn ƒë·ªông (Client-Side Prediction).
 * - G·ª≠i tr·∫°ng th√°i (v·ªã tr√≠, animation) l√™n server.
 * - Qu·∫£n l√Ω c√°c component tr·ª±c thu·ªôc nh∆∞ AnimationManager v√† CameraManager.
 */
export class Player {
  // === CORE COMPONENTS ===
  // S·ª¨A ƒê·ªîI: Thay Scene b·∫±ng BasePlatformerScene ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p c√°c ph∆∞∆°ng th·ª©c respawn
  private scene: BasePlatformerScene;
  private sprite!: Phaser.Physics.Arcade.Sprite;
  private nameTag!: Phaser.GameObjects.Text; // <-- TH√äM M·ªöI
  private animationManager!: AnimationManager;
  private inputManager: InputManager;
  private cameraManager: CameraManager;
  private config: Required<PlayerConfig>;
  private networkManager: NetworkManager;
  private lastSentState: {
    x?: number;
    y?: number;
    animState?: string;
    flipX?: boolean;
  } = {};

  // TH√äM M·ªöI: C·ªù ƒë·ªÉ tr√°nh g·ªçi respawn nhi·ªÅu l·∫ßn
  private isDead: boolean = false;

  // <-- TH√äM C√ÅC BI·∫æN TR·∫†NG TH√ÅI M·ªöI CHO T√çNH NƒÇNG N·∫ÆM V√Ä THO√ÅT -->
  public playerState: PlayerStateSchema | null = null; // L∆∞u state t·ª´ server
  private struggleCooldown = 0; // ƒê·ªÉ tr√°nh spam server
  private GRAB_DISTANCE_THRESHOLD = 80; // Kho·∫£ng c√°ch t·ªëi ƒëa ƒë·ªÉ n·∫Øm (pixel)

  // <-- TH√äM C√ÅC THU·ªòC T√çNH M·ªöI CHO N·ªòI SUY D·ª∞A TR√äN V·∫¨N T·ªêC -->
  private serverTargetPosition: { x: number; y: number } | null = null;
  // (C√°c h·∫±ng s·ªë ƒë√£ gom v√†o InterpolationUtils)

  constructor(
    // S·ª¨A ƒê·ªîI: Thay Scene b·∫±ng BasePlatformerScene
    scene: BasePlatformerScene,
    config: PlayerConfig,
    inputManager: InputManager,
    cameraManager: CameraManager,
    networkManager: NetworkManager
  ) {
    this.scene = scene;
    this.inputManager = inputManager;
    this.cameraManager = cameraManager;
    this.networkManager = networkManager;
    this.config = {
      x: config.x,
      y: config.y,
      texture: config.texture,
      username: config.username, // <-- TH√äM M·ªöI
      characterData: config.characterData || DEFAULT_CHARACTER,
      physics: config.physics || {
        speed: 200,
        jumpPower: 400,
        gravity: 800,
        bounce: 0.2,
      },
    };

    this.setupFrames();
    this.createSprite();
    this.createNameTag(); // <-- TH√äM M·ªöI: G·ªçi h√†m t·∫°o name tag

    // üîß Check if sprite creation succeeded
    if (!this.sprite) {
      console.error(
        `‚ùå Player sprite creation failed, aborting initialization`
      );
      return;
    }

    this.setupPhysics();
    this.setupAnimations();
    this.setupCamera();
  }

  // <-- TH√äM PH∆Ø∆†NG TH·ª®C M·ªöI -->
  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª•c b·ªô c·ªßa player t·ª´ server.
   * ƒê∆∞·ª£c g·ªçi b·ªüi BasePlatformerScene.
   */
  public setPlayerState(newState: PlayerStateSchema): void {
    const wasGrabbed = this.playerState?.isGrabbed;
    this.playerState = newState;

    if (newState.isGrabbed) {
      // L∆∞u m·ª•c ti√™u t·ª´ server
      const firstTarget = !this.serverTargetPosition;
      this.serverTargetPosition = { x: newState.x, y: newState.y };
      // N·∫øu v·ª´a b·ªã n·∫Øm, teleport ngay ƒë·ªÉ tr√°nh gi·∫≠t t·ª´ xa
      if (firstTarget && this.sprite) {
        this.sprite.setPosition(newState.x, newState.y);
      }
    } else {
      this.serverTargetPosition = null;
    }
  }

  private setupFrames(): void {
    const texture = this.scene.textures.get(this.config.texture);
    Object.entries(this.config.characterData).forEach(([, frames]) => {
      frames.forEach((frame: any, index: number) => {
        const frameKey = `char_${frame.x}_${frame.y}_${index}`;
        if (!texture.has(frameKey)) {
          texture.add(frameKey, 0, frame.x, frame.y, frame.width, frame.height);
        }
      });
    });
  }

  private createSprite(): void {
    // üîß Safety check cho characterData
    if (!this.config.characterData) {
      console.error(`‚ùå CharacterData is null, using DEFAULT_CHARACTER`);
      this.config.characterData = DEFAULT_CHARACTER;
    }

    // üîß Safety check cho scene v√† texture
    if (!this.scene) {
      console.error(`‚ùå Scene is null in Player.createSprite()`);
      return;
    }

    if (!this.scene.textures.exists(this.config.texture)) {
      console.error(`‚ùå Texture ${this.config.texture} not loaded yet`);
      return;
    }

    const firstFrame = this.config.characterData.idle[0];
    const frameKey = `char_${firstFrame.x}_${firstFrame.y}_0`;

    console.log(
      `üé® Creating sprite with texture: ${this.config.texture}, frame: ${frameKey}`
    );

    // Ki·ªÉm tra scene v√† physics system tr∆∞·ªõc khi t·∫°o sprite
    if (!this.scene || !this.scene.physics) {
      console.error(
        `‚ùå Scene or physics system not available for sprite creation`
      );
      return;
    }

    this.sprite = this.scene.physics.add.sprite(
      this.config.x,
      this.config.y,
      this.config.texture,
      frameKey
    );

    if (!this.sprite) {
      console.error(`‚ùå Failed to create sprite`);
      return;
    }

    this.sprite.setDisplaySize(96, 96);
  }

  private createNameTag(): void {
    // <-- TH√äM M·ªöI: H√†m t·∫°o name tag
    if (!this.sprite) return;

    // S·ª≠ d·ª•ng TextUtils ƒë·ªÉ t·∫°o name tag ch·∫•t l∆∞·ª£ng cao
    this.nameTag = TextUtils.createPlayerNameTag(
      this.scene,
      this.sprite.x,
      this.sprite.y - 60,
      this.config.username,
      true // isLocalPlayer = true
    );

    // Th√™m hi·ªáu ·ª©ng fade in cho name tag
    TextUtils.fadeInText(this.nameTag, 300);
  }

  private setupPhysics(): void {
    if (!this.sprite) {
      console.error(`‚ùå Cannot setup physics: sprite is null`);
      return;
    }

    const body = this.sprite.body as Phaser.Physics.Arcade.Body;
    body.setBounce(this.config.physics.bounce);
    // S·ª¨A L·∫†I: Gi·ªØ nguy√™n collision v·ªõi world bounds ƒë·ªÉ kh√¥ng xuy√™n qua platform
    body.setCollideWorldBounds(true);
    body.setGravityY(this.config.physics.gravity);

    // TH√äM/S·ª¨A ƒê·ªîI C√ÅC D√íNG N√ÄY
    body.setSize(48, 80); // Thu nh·ªè hitbox m·ªôt ch√∫t ƒë·ªÉ tr√°nh va ch·∫°m kh√¥ng mong mu·ªën
    body.setOffset(40, 48); // ƒêi·ªÅu ch·ªânh offset cho ph√π h·ª£p
    body.pushable = false; // ƒê·∫£m b·∫£o ng∆∞·ªùi ch∆°i ch√≠nh c≈©ng c√≥ th·ªÉ b·ªã ƒë·∫©y
  }

  private setupAnimations(): void {
    this.animationManager = new AnimationManager(
      this.scene,
      this.sprite,
      this.config.characterData
    );
  }

  private setupCamera(): void {
    this.cameraManager.followTarget(this.sprite);
  }

  /**
   * üîÑ UPDATE - Logic m·ªõi v·ªõi t√≠nh nƒÉng n·∫Øm v√† tho√°t
   */
  public update(): void {
    if (!this.sprite || !this.sprite.body || this.isDead || !this.playerState)
      return;

    // TH√äM M·ªöI: KI·ªÇM TRA R∆†I KH·ªéI MAP
    const worldHeight = this.scene.physics.world.bounds.height;
    const body = this.sprite.body as Phaser.Physics.Arcade.Body;

    if (this.sprite.y >= worldHeight - 60) {
      this.isDead = true;
      console.log(
        `üíÄ Player has fallen to the bottom danger zone at Y: ${this.sprite.y} (world height: ${worldHeight}). Triggering respawn.`
      );
      // TH√äM M·ªöI: B·ªè n·∫Øm khi ch·∫øt
      this.scene.handlePlayerDeath();
      this.scene.handlePlayerFall();
      return;
    }

    const inputState = this.inputManager.update();

    // =======================================================
    // === LOGIC M·ªöI: PH√ÇN T√ÅCH D·ª∞A TR√äN TR·∫†NG TH√ÅI isGrabbed ===
    // =======================================================

    if (this.playerState.isGrabbed && this.serverTargetPosition) {
      // ----- LOGIC KHI B·ªä N·∫ÆM (N·ªòI SUY B·∫∞NG V·∫¨N T·ªêC) -----
      InterpolationUtils.updateVelocity(this.sprite, this.serverTargetPosition);

      // 2. X·ª≠ l√Ω animation "v√πng v·∫´y"
      // Client c√≥ quy·ªÅn quy·∫øt ƒë·ªãnh animation v√πng v·∫´y c·ªßa ch√≠nh m√¨nh
      const isTryingToMove = inputState.left || inputState.right;
      if (isTryingToMove) {
        this.animationManager.playAnimation("walk");
        this.sprite.setFlipX(inputState.left);
      } else {
        // N·∫øu kh√¥ng v√πng v·∫´y, th√¨ d√πng animation t·ª´ server (do ng∆∞·ªùi n·∫Øm quy·∫øt ƒë·ªãnh)
        this.animationManager.playAnimation(
          this.playerState.animState as AnimationState
        );
        this.sprite.setFlipX(this.playerState.flipX);
      }

      // 3. X·ª≠ l√Ω "n·ªó l·ª±c tho√°t" (struggle)
      const isStruggling =
        inputState.left || inputState.right || inputState.jump;
      if (isStruggling && this.scene.time.now > this.struggleCooldown) {
        this.networkManager.room?.send("struggle");
        this.struggleCooldown = this.scene.time.now + 100; // Cooldown 100ms
      }
    } else if (this.playerState.isGrabbing) {
      // ----- LOGIC KHI ƒêANG N·∫ÆM AI ƒê√ì -----

      // Di chuy·ªÉn ch·∫≠m h∆°n khi ƒëang n·∫Øm ng∆∞·ªùi kh√°c
      const grabSpeed = this.config.physics.speed * 0.7; // Ch·∫≠m h∆°n 30%

      if (inputState.left) {
        body.setVelocityX(-grabSpeed);
      } else if (inputState.right) {
        body.setVelocityX(grabSpeed);
      } else {
        body.setVelocityX(0);
      }

      // Kh√¥ng th·ªÉ nh·∫£y khi ƒëang n·∫Øm ng∆∞·ªùi kh√°c
      if (inputState.jump && body.blocked.down) {
        // C√≥ th·ªÉ th√™m sound effect "can't jump" ·ªü ƒë√¢y
        console.log("Cannot jump while grabbing someone!");
      }

      // C·∫≠p nh·∫≠t animation d·ª±a tr√™n velocity
      this.animationManager.updateAnimation(body.velocity, body.blocked.down);
    } else {
      // ----- LOGIC DI CHUY·ªÇN B√åNH TH∆Ø·ªúNG -----

      if (inputState.left) {
        body.setVelocityX(-this.config.physics.speed);
      } else if (inputState.right) {
        body.setVelocityX(this.config.physics.speed);
      } else {
        body.setVelocityX(0);
      }

      if (inputState.jump && body.blocked.down) {
        body.setVelocityY(-this.config.physics.jumpPower);
        this.scene.sound.play("jump");
      }

      // C·∫≠p nh·∫≠t animation d·ª±a tr√™n velocity
      this.animationManager.updateAnimation(body.velocity, body.blocked.down);
    }

    // ----- LOGIC CHUNG CHO C·∫¢ HAI TR·∫†NG TH√ÅI -----

    // 4. X·ª≠ l√Ω h√†nh ƒë·ªông "n·∫Øm" ho·∫∑c "b·ªè n·∫Øm"
    if (this.inputManager.isJustPressed("grab")) {
      if (this.playerState.isGrabbing) {
        // N·∫øu ƒëang n·∫Øm ai ƒë√≥ -> b·ªè n·∫Øm
        console.log(`[Client] Requesting to release grab`);
        this.networkManager.room?.send("requestGrab", {
          targetSessionId: this.playerState.isGrabbing,
        });
      } else {
        // N·∫øu kh√¥ng n·∫Øm ai -> t√¨m ng∆∞·ªùi ƒë·ªÉ n·∫Øm
        const closestRemotePlayer = this.scene.findClosestRemotePlayer(
          this.sprite.x,
          this.sprite.y,
          this.GRAB_DISTANCE_THRESHOLD
        );
        if (closestRemotePlayer) {
          console.log(
            `[Client] Requesting to grab ${closestRemotePlayer.sessionId}`
          );
          this.networkManager.room?.send("requestGrab", {
            targetSessionId: closestRemotePlayer.sessionId,
          });
        }
      }
    }

    // 5. G·ª≠i tr·∫°ng th√°i l√™n server (gi·ªØ nguy√™n)
    // QUAN TR·ªåNG: V·∫´n g·ª≠i update v·ªã tr√≠, v√¨ khi b·ªã n·∫Øm, server s·∫Ω ghi ƒë√® l√™n v·ªã tr√≠ n√†y.
    // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o khi ƒë∆∞·ª£c th·∫£ ra, v·ªã tr√≠ c·ªßa b·∫°n l√† ch√≠nh x√°c.
    const currentState = {
      x: Math.round(this.sprite.x),
      y: Math.round(this.sprite.y),
      animState: this.animationManager.getCurrentState(),
      flipX: this.sprite.flipX,
    };

    if (
      currentState.x !== this.lastSentState.x ||
      currentState.y !== this.lastSentState.y ||
      currentState.animState !== this.lastSentState.animState ||
      currentState.flipX !== this.lastSentState.flipX
    ) {
      this.networkManager.sendUpdate(currentState);
      this.lastSentState = currentState;
    }

    // 6. C·∫≠p nh·∫≠t camera v√† name tag (gi·ªØ nguy√™n)
    this.cameraManager.update();
    if (this.nameTag) {
      this.nameTag.x = this.sprite.x;
      this.nameTag.y = this.sprite.y - 60;
    }
  }

  public getSprite(): Phaser.Physics.Arcade.Sprite {
    return this.sprite;
  }

  public getPosition(): { x: number; y: number } {
    return { x: this.sprite.x, y: this.sprite.y };
  }

  /**
   * TH√äM M·ªöI: Ph∆∞∆°ng th·ª©c ƒë·ªÉ h·ªìi sinh player
   */
  public respawn(): void {
    this.isDead = false;
    // C√≥ th·ªÉ th√™m c√°c logic kh√°c nh∆∞ reset tr·∫°ng th√°i power-up ·ªü ƒë√¢y
    console.log("Player has been respawned.");
  }

  public destroy(): void {
    this.nameTag?.destroy(); // <-- TH√äM M·ªöI

    this.animationManager?.destroy();
    this.sprite?.destroy();
  }
}

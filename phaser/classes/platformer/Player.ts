import { Scene } from "phaser";
import { AnimationManager, AnimationState } from "./AnimationManager";
import { InputManager } from "./InputManager";
import { CameraManager } from "./CameraManager";
import { CharacterAnimations, DEFAULT_CHARACTER } from "./CharacterFrames";
import { NetworkManager } from "../core/NetworkManager";
import { TextUtils } from "../../utils/TextUtils"; // <-- TH√äM M·ªöI
// TH√äM M·ªöI: Import BasePlatformerScene ƒë·ªÉ c√≥ th·ªÉ g·ªçi ph∆∞∆°ng th·ª©c c·ªßa n√≥
import { BasePlatformerScene } from "../../scenes";
import { Player as PlayerStateSchema } from "../core/types/GameRoomState"; // Import schema ƒë·ªÉ type hinting
import { InterpolationUtils } from "../../utils/InterpolationUtils";
import {
  IStatusEffect,
  KnockbackEffect,
  NoHorizontalMoveEffect,
  NoJumpEffect,
  SpringLaunchEffect,
  SwimmingEffect,
} from "./effects";

// ======================== TH√äM H·∫∞NG S·ªê CHO H·ªÜ TH·ªêNG TRUY·ªÄN L·ª∞C ƒê·∫®Y ========================
const KNOCKBACK_FORCE_MULTIPLIER = 0.7; // l·ª±c vƒÉng
// ===================================================================

export interface PlayerConfig {
  x: number;
  y: number;
  texture: string;
  username: string; // <-- TH√äM M·ªöI
  characterData?: CharacterAnimations;
  physics?: {
    speed: number;
    jumpPower: number;
    gravity: number;
    bounce: number;
  };
}

/**
 * üèÉ PLAYER CLASS (Multiplayer-First)
 *
 * Phi√™n b·∫£n ƒë∆∞·ª£c t√°i c·∫•u tr√∫c ho√†n to√†n cho multiplayer.
 * L·ªõp n√†y kh√¥ng c√≤n ch·ª©a StateMachine hay Command Pattern.
 *
 * TR√ÅCH NHI·ªÜM:
 * - ƒê·ªçc input t·ª´ InputManager.
 * - √Åp d·ª•ng v·∫≠t l√Ω c·ª•c b·ªô ƒë·ªÉ d·ª± ƒëo√°n chuy·ªÉn ƒë·ªông (Client-Side Prediction).
 * - G·ª≠i tr·∫°ng th√°i (v·ªã tr√≠, animation) l√™n server.
 * - Qu·∫£n l√Ω c√°c component tr·ª±c thu·ªôc nh∆∞ AnimationManager v√† CameraManager.
 */
export class Player {
  // === CORE COMPONENTS ===
  // S·ª¨A ƒê·ªîI: Thay Scene b·∫±ng BasePlatformerScene ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p c√°c ph∆∞∆°ng th·ª©c respawn
  private scene: BasePlatformerScene;
  private sprite!: Phaser.Physics.Arcade.Sprite;
  private nameTag!: Phaser.GameObjects.Text; // <-- TH√äM M·ªöI
  private animationManager!: AnimationManager;

  private inputManager: InputManager;
  private cameraManager: CameraManager;
  private config: Required<PlayerConfig>;
  private networkManager: NetworkManager;
  private lastSentState: {
    x?: number;
    y?: number;
    animState?: string;
    flipX?: boolean;
  } = {};

  // TH√äM M·ªöI: C·ªù ƒë·ªÉ tr√°nh g·ªçi respawn nhi·ªÅu l·∫ßn
  private isDead: boolean = false;

  // TH√äM M·ªöI: Cooldown cho h√†nh ƒë·ªông nh·∫£y ƒë·ªÉ tr√°nh spam nh·∫£y tr√™n ƒë·∫ßu ng∆∞·ªùi ch∆°i kh√°c
  private jumpCooldown: number = 0;

  // <-- TH√äM C√ÅC BI·∫æN TR·∫†NG TH√ÅI M·ªöI CHO T√çNH NƒÇM V√Ä THO√ÅT -->
  public playerState: PlayerStateSchema | null = null; // L∆∞u state t·ª´ server
  private struggleCooldown = 0; // ƒê·ªÉ tr√°nh spam server
  private GRAB_DISTANCE_THRESHOLD = 80; // Kho·∫£ng c√°ch t·ªëi ƒëa ƒë·ªÉ n·∫Øm (pixel)

  // <-- TH√äM C√ÅC THU·ªòC T√çNH M·ªöI CHO N·ªòI SUY D·ª∞A TR√äN V·∫¨N T·ªêC -->
  private serverTargetPosition: { x: number; y: number } | null = null;
  // (C√°c h·∫±ng s·ªë ƒë√£ gom v√†o InterpolationUtils)

  // M·ªöI: Th√™m tr·∫°ng th√°i ƒë·ªÉ bi·∫øt khi n√†o ng∆∞·ªùi ch∆°i ƒëang bay l√™n do l√≤ xo
  // (ƒë∆∞·ª£c thay th·∫ø b·∫±ng h·ªá th·ªëng StatusEffect)

  // === SNOW EFFECT STATE ===
  private originalPhysics!: { speed: number; jumpPower: number };
  private isOnSnow: boolean = false;
  private wasOnSnowLastFrame: boolean = false;

  // === STATUS EFFECTS MANAGER ===
  private activeEffects: Map<string, IStatusEffect> = new Map();

  // M·ªöI: C√°c thu·ªôc t√≠nh ƒë·ªÉ theo d√µi qu√£ng ƒë∆∞·ªùng r∆°i
  private isActivelyFalling: boolean = false;
  private fallStartHeight: number = 0;

  // === SWIMMING STATE ===
  private isInWaterThisFrame: boolean = false;

  // === FALL-THROUGH STATE ===
  // TH√äM M·ªöI: S·ª≠ d·ª•ng 2 c·ªù tr·∫°ng th√°i ƒë·ªÉ tr√°nh race condition
  private isInFallZone: boolean = false; // C·ªù tr·∫°ng th√°i "b·ªÅn b·ªâ"
  public wasInFallZoneThisFrame: boolean = false; // C·ªù "c·∫£m bi·∫øn" t·∫°m th·ªùi, public ƒë·ªÉ WorldBuilder c√≥ th·ªÉ set

  constructor(
    // S·ª¨A ƒê·ªîI: Thay Scene b·∫±ng BasePlatformerScene
    scene: BasePlatformerScene,
    config: PlayerConfig,
    inputManager: InputManager,
    cameraManager: CameraManager,
    networkManager: NetworkManager
  ) {
    this.scene = scene;
    this.inputManager = inputManager;
    this.cameraManager = cameraManager;
    this.networkManager = networkManager;
    this.config = {
      x: config.x,
      y: config.y,
      texture: config.texture,
      username: config.username, // <-- TH√äM M·ªöI
      characterData: config.characterData || DEFAULT_CHARACTER,
      physics: config.physics || {
        speed: 200,
        jumpPower: 400,
        gravity: 800,
        bounce: 0.2,
      },
    };

    this.setupFrames();
    this.createSprite();
    this.createNameTag(); // <-- TH√äM M·ªöI: G·ªçi h√†m t·∫°o name tag

    // üîß Check if sprite creation succeeded
    if (!this.sprite) {
      console.error(
        `‚ùå Player sprite creation failed, aborting initialization`
      );
      return;
    }

    this.setupPhysics();
    this.setupAnimations();
    this.setupCamera();
  }

  // TH√äM D√íNG N√ÄY: L∆∞u l·∫°i c·∫•u h√¨nh v·∫≠t l√Ω ban ƒë·∫ßu SAU khi this.config ƒë∆∞·ª£c thi·∫øt l·∫≠p
  // Ghi ch√∫: ƒê·∫∑t sau constructor ph·∫ßn set this.config ·ªü tr√™n
  // (ƒê∆∞·ª£c ch√®n h·ª£p l√Ω trong constructor khi this.config ƒë√£ c√≥ physics)
  // Initialize original physics baselines
  // (Keep defaults in case physics is undefined for safety, though config ensures it exists)
  private initializeOriginalPhysicsOnce(): void {
    if (!this.originalPhysics) {
      this.originalPhysics = {
        speed: this.config.physics.speed,
        jumpPower: this.config.physics.jumpPower,
      };
    }
  }

  // <-- TH√äM PH∆Ø∆†NG TH·ª®C M·ªöI -->
  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª•c b·ªô c·ªßa player t·ª´ server.
   * ƒê∆∞·ª£c g·ªçi b·ªüi BasePlatformerScene.
   */
  public setPlayerState(newState: PlayerStateSchema): void {
    const wasGrabbed = this.playerState?.isGrabbed;
    this.playerState = newState;

    if (newState.isGrabbed) {
      // L∆∞u m·ª•c ti√™u t·ª´ server
      const firstTarget = !this.serverTargetPosition;
      this.serverTargetPosition = { x: newState.x, y: newState.y };
      // N·∫øu v·ª´a b·ªã n·∫Øm, teleport ngay ƒë·ªÉ tr√°nh gi·∫≠t t·ª´ xa
      if (firstTarget && this.sprite) {
        this.sprite.setPosition(newState.x, newState.y);
      }
    } else {
      this.serverTargetPosition = null;
    }
  }

  /**
   * M·ªöI: ƒê∆∞·ª£c g·ªçi b·ªüi Scene khi ng∆∞·ªùi ch∆°i va ch·∫°m v·ªõi l√≤ xo.
   * Thay v√¨ c·ªù boolean, d√πng hi·ªáu ·ª©ng tr·∫°ng th√°i.
   */
  public setSpringLaunched(): void {
    this.addStatusEffect(new SpringLaunchEffect());
  }

  /**
   * Cung c·∫•p m·ªôt ph∆∞∆°ng th·ª©c c√¥ng khai ƒë·ªÉ c√°c h·ªá th·ªëng kh√°c ki·ªÉm tra tr·∫°ng th√°i.
   */
  public getIsSpringLaunched(): boolean {
    return this.hasStatusEffect("spring_launch");
  }

  /**
   * K√≠ch ho·∫°t tr·∫°ng th√°i "ƒëang b·ªã ƒë·∫©y ngang" b·∫±ng hi·ªáu ·ª©ng (kh√≥a di chuy·ªÉn ngang/nh·∫£y t·∫°m th·ªùi).
   */
  public setHorizontallyLaunched(): void {
    this.addStatusEffect(new NoHorizontalMoveEffect(1500));
    this.addStatusEffect(new NoJumpEffect(1500));
  }

  /**
   * Cung c·∫•p ph∆∞∆°ng th·ª©c c√¥ng khai ƒë·ªÉ Rules c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i n√†y.
   */
  public getIsHorizontallyLaunched(): boolean {
    return this.hasStatusEffect("no_horizontal_move");
  }

  // === SNOW EFFECT API ===
  /**
   * ‚ùÑÔ∏è √Åp d·ª•ng hi·ªáu ·ª©ng ƒëi tr√™n tuy·∫øt (ch·∫≠m v√† nh·∫£y th·∫•p).
   */
  public applySnowEffect(): void {
    this.initializeOriginalPhysicsOnce();
    this.config.physics.speed = this.originalPhysics.speed * 0.6;
    this.config.physics.jumpPower = this.originalPhysics.jumpPower * 0.7;
  }

  /**
   * ‚òÄÔ∏è Reset c√°c thu·ªôc t√≠nh v·∫≠t l√Ω v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh.
   */
  public resetPhysicsToDefault(): void {
    this.initializeOriginalPhysicsOnce();
    this.config.physics.speed = this.originalPhysics.speed;
    this.config.physics.jumpPower = this.originalPhysics.jumpPower;
  }

  /**
   * C·ªù cho bi·∫øt frame hi·ªán t·∫°i c√≥ ƒëang ƒë·ª©ng tr√™n tuy·∫øt kh√¥ng.
   */
  public setOnSnow(isOnSnow: boolean): void {
    this.isOnSnow = isOnSnow;
  }

  /**
   * Cung c·∫•p ph∆∞∆°ng th·ª©c c√¥ng khai ƒë·ªÉ Rules c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i knockback.
   */
  public getIsBeingKnockedBack(): boolean {
    return this.hasStatusEffect("knockback");
  }

  // ======================== TH√äM PH∆Ø∆†NG TH·ª®C M·ªöI CHO H·ªÜ TH·ªêNG TRUY·ªÄN L·ª∞C ƒê·∫®Y ========================
  /**
   * √Åp d·ª•ng m·ªôt l·ª±c vƒÉng t·ª´ b√™n ngo√†i (do ng∆∞·ªùi ch∆°i kh√°c g√¢y ra).
   * @param forceX L·ª±c theo tr·ª•c X.
   * @param forceY L·ª±c theo tr·ª•c Y.
   */
  public applyKnockback(forceX: number, forceY: number): void {
    if (!this.sprite || !this.sprite.body) return;
    const body = this.sprite.body as Phaser.Physics.Arcade.Body;

    console.log(
      `[Player] Applying knockback force: ${forceX.toFixed(
        0
      )}, ${forceY.toFixed(0)}`
    );

    body.setVelocity(
      forceX * KNOCKBACK_FORCE_MULTIPLIER,
      forceY * KNOCKBACK_FORCE_MULTIPLIER
    );

    // √Åp d·ª•ng hi·ªáu ·ª©ng ƒë·ªÉ v√¥ hi·ªáu h√≥a ƒëi·ªÅu khi·ªÉn trong th·ªùi gian ng·∫Øn
    this.addStatusEffect(new KnockbackEffect());
  }
  // ===================================================================

  /**
   * M·ªöI: Cung c·∫•p m·ªôt ph∆∞∆°ng th·ª©c c√¥ng khai ƒë·ªÉ Scene c√≥ th·ªÉ l·∫•y qu√£ng ƒë∆∞·ªùng r∆°i.
   * @returns Qu√£ng ƒë∆∞·ªùng ƒë√£ r∆°i t√≠nh b·∫±ng pixel.
   */
  public getFallDistance(): number {
    if (this.isActivelyFalling) {
      // Tr·∫£ v·ªÅ qu√£ng ƒë∆∞·ªùng r∆°i hi·ªán t·∫°i, ƒë·∫£m b·∫£o kh√¥ng √¢m
      return Math.max(0, this.sprite.y - this.fallStartHeight);
    }
    return 0; // Tr·∫£ v·ªÅ 0 n·∫øu kh√¥ng ƒëang trong tr·∫°ng th√°i r∆°i
  }

  private setupFrames(): void {
    const texture = this.scene.textures.get(this.config.texture);
    Object.entries(this.config.characterData).forEach(([, frames]) => {
      frames.forEach((frame: any, index: number) => {
        const frameKey = `char_${frame.x}_${frame.y}_${index}`;
        if (!texture.has(frameKey)) {
          texture.add(frameKey, 0, frame.x, frame.y, frame.width, frame.height);
        }
      });
    });
  }

  private createSprite(): void {
    // üîß Safety check cho characterData
    if (!this.config.characterData) {
      console.error(`‚ùå CharacterData is null, using DEFAULT_CHARACTER`);
      this.config.characterData = DEFAULT_CHARACTER;
    }

    // üîß Safety check cho scene v√† texture
    if (!this.scene) {
      console.error(`‚ùå Scene is null in Player.createSprite()`);
      return;
    }

    if (!this.scene.textures.exists(this.config.texture)) {
      console.error(`‚ùå Texture ${this.config.texture} not loaded yet`);
      return;
    }

    const firstFrame = this.config.characterData.idle[0];
    const frameKey = `char_${firstFrame.x}_${firstFrame.y}_0`;

    console.log(
      `üé® Creating sprite with texture: ${this.config.texture}, frame: ${frameKey}`
    );

    // Ki·ªÉm tra scene v√† physics system tr∆∞·ªõc khi t·∫°o sprite
    if (!this.scene || !this.scene.physics) {
      console.error(
        `‚ùå Scene or physics system not available for sprite creation`
      );
      return;
    }

    this.sprite = this.scene.physics.add.sprite(
      this.config.x,
      this.config.y,
      this.config.texture,
      frameKey
    );

    if (!this.sprite) {
      console.error(`‚ùå Failed to create sprite`);
      return;
    }

    this.sprite.setDisplaySize(96, 96);
  }

  private createNameTag(): void {
    // <-- TH√äM M·ªöI: H√†m t·∫°o name tag
    if (!this.sprite) return;

    // S·ª≠ d·ª•ng TextUtils ƒë·ªÉ t·∫°o name tag ch·∫•t l∆∞·ª£ng cao
    this.nameTag = TextUtils.createPlayerNameTag(
      this.scene,
      this.sprite.x,
      this.sprite.y - 60,
      this.config.username,
      true // isLocalPlayer = true
    );

    // Th√™m hi·ªáu ·ª©ng fade in cho name tag
    TextUtils.fadeInText(this.nameTag, 300);
  }

  private setupPhysics(): void {
    if (!this.sprite) {
      console.error(`‚ùå Cannot setup physics: sprite is null`);
      return;
    }

    const body = this.sprite.body as Phaser.Physics.Arcade.Body;
    body.setBounce(this.config.physics.bounce);
    // S·ª¨A L·∫†I: Gi·ªØ nguy√™n collision v·ªõi world bounds ƒë·ªÉ kh√¥ng xuy√™n qua platform
    body.setCollideWorldBounds(true);
    body.setGravityY(this.config.physics.gravity);

    // TH√äM/S·ª¨A ƒê·ªîI C√ÅC D√íNG N√ÄY
    body.setSize(48, 80); // Thu nh·ªè hitbox m·ªôt ch√∫t ƒë·ªÉ tr√°nh va ch·∫°m kh√¥ng mong mu·ªën
    body.setOffset(40, 48); // ƒêi·ªÅu ch·ªânh offset cho ph√π h·ª£p
    body.pushable = false; // ƒê·∫£m b·∫£o ng∆∞·ªùi ch∆°i ch√≠nh c≈©ng c√≥ th·ªÉ b·ªã ƒë·∫©y
  }

  private setupAnimations(): void {
    this.animationManager = new AnimationManager(
      this.scene,
      this.sprite,
      this.config.characterData
    );
  }

  private setupCamera(): void {
    this.cameraManager.followTarget(this.sprite);
  }

  /**
   * ƒê∆∞·ª£c g·ªçi b·ªüi WaterBehavior m·ªói frame khi ng∆∞·ªùi ch∆°i ·ªü trong n∆∞·ªõc.
   * Ph∆∞∆°ng th·ª©c n√†y s·∫Ω k√≠ch ho·∫°t v√† duy tr√¨ tr·∫°ng th√°i b∆°i.
   */
  public markAsInWater(): void {
    this.isInWaterThisFrame = true;
    // N·∫øu ch∆∞a b∆°i, b·∫Øt ƒë·∫ßu b∆°i
    if (!this.hasStatusEffect("swimming")) {
      this.addStatusEffect(new SwimmingEffect());
    }
  }

  /**
   * üîÑ UPDATE - Logic m·ªõi v·ªõi t√≠nh nƒÉng n·∫Øm v√† tho√°t
   */
  public update(): void {
    // === LOGIC M·ªöI: C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI TR∆Ø·ªöC V·∫¨T L√ù ===
    // Logic n√†y ch·∫°y ·ªü ƒë·∫ßu m·ªói frame, TR∆Ø·ªöC KHI engine v·∫≠t l√Ω ho·∫°t ƒë·ªông.
    // N√≥ quy·∫øt ƒë·ªãnh tr·∫°ng th√°i cho frame HI·ªÜN T·∫†I d·ª±a tr√™n k·∫øt qu·∫£ c·ªßa frame TR∆Ø·ªöC.

    // 1. N·∫øu c·∫£m bi·∫øn c·ªßa frame tr∆∞·ªõc KH√îNG ƒë∆∞·ª£c b·∫≠t -> t·ª©c l√† ta ƒë√£ ra kh·ªèi zone.
    if (!this.wasInFallZoneThisFrame) {
      this.isInFallZone = false; // T·∫Øt tr·∫°ng th√°i r∆°i b·ªÅn b·ªâ.
    }

    // 2. Reset c·∫£m bi·∫øn cho frame hi·ªán t·∫°i.
    // Overlap s·∫Ω b·∫≠t l·∫°i n√≥ n·∫øu c·∫ßn.
    this.wasInFallZoneThisFrame = false;
    // =======================================================
    // === 1) C·∫≠p nh·∫≠t t·∫•t c·∫£ Status Effects v√† d·ªçn d·∫πp ===
    const dt = this.scene.game.loop.delta;
    const finishedEffects: string[] = [];
    for (const effect of this.activeEffects.values()) {
      effect.update(dt, this);
      if (effect.isFinished) finishedEffects.push(effect.id);
    }
    finishedEffects.forEach((id) => this.removeStatusEffect(id));

    // === 2) Qu·∫£n l√Ω hi·ªáu ·ª©ng Tuy·∫øt theo frame flags ===
    if (
      this.wasOnSnowLastFrame &&
      !this.isOnSnow &&
      this.hasStatusEffect("snow_slow")
    ) {
      this.removeStatusEffect("snow_slow");
    }
    this.wasOnSnowLastFrame = this.isOnSnow;
    this.isOnSnow = false;

    // === 3) LOGIC M·ªöI: Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i v·ª´a r·ªùi kh·ªèi n∆∞·ªõc ===
    // N·∫øu frame tr∆∞·ªõc ƒëang b∆°i V√Ä frame n√†y kh√¥ng c√≤n trong n∆∞·ªõc -> g·ª° hi·ªáu ·ª©ng
    if (this.hasStatusEffect("swimming") && !this.isInWaterThisFrame) {
      this.removeStatusEffect("swimming");
    }

    if (!this.sprite || !this.sprite.body || this.isDead || !this.playerState)
      return;

    // TH√äM M·ªöI: KI·ªÇM TRA R∆†I KH·ªéI MAP
    const worldHeight = this.scene.physics.world.bounds.height;
    const body = this.sprite.body as Phaser.Physics.Arcade.Body;

    if (this.sprite.y >= worldHeight - 60) {
      this.isDead = true;
      console.log(
        `üíÄ Player has fallen to the bottom danger zone at Y: ${this.sprite.y} (world height: ${worldHeight}). Triggering respawn.`
      );
      // TH√äM M·ªöI: B·ªè n·∫Øm khi ch·∫øt
      this.scene.handlePlayerDeath();
      this.scene.handlePlayerFall();
      return;
    }

    // --- LOGIC THEO D√ïI QU√ÉNG ƒê∆Ø·ªúNG R∆†I M·ªöI ---
    const isOnGround = body.blocked.down || body.touching.down;

    // 1. Ph√°t hi·ªán th·ªùi ƒëi·ªÉm B·∫ÆT ƒê·∫¶U r∆°i
    if (!isOnGround && body.velocity.y > 0 && !this.isActivelyFalling) {
      this.isActivelyFalling = true;
      this.fallStartHeight = this.sprite.y; // Ghi l·∫°i ƒë·ªô cao khi b·∫Øt ƒë·∫ßu r∆°i
      console.log(
        `FALL TRACKING: Started falling at Y=${this.fallStartHeight.toFixed(0)}`
      );
    }

    // 2. Ph√°t hi·ªán th·ªùi ƒëi·ªÉm TI·∫æP ƒê·∫§T (ho·∫∑c va ch·∫°m th·ª© g√¨ ƒë√≥ b√™n d∆∞·ªõi)
    if (isOnGround && this.isActivelyFalling) {
      this.isActivelyFalling = false;
      const fallDistance = this.sprite.y - this.fallStartHeight;
      console.log(
        `FALL TRACKING: Landed. Total fall distance: ${fallDistance.toFixed(
          0
        )} pixels.`
      );
    }
    // ------------------------------------------

    const inputState = this.inputManager.update();
    // (C√°c hi·ªáu ·ª©ng s·∫Ω t·ª± c·∫≠p nh·∫≠t v√† k·∫øt th√∫c; kh√¥ng c√≤n c·∫ßn logic reset th·ªß c√¥ng)

    // =======================================================
    // === LOGIC M·ªöI: S·∫ÆP X·∫æP L·∫†I TH·ª® T·ª∞ ∆ØU TI√äN ===
    // =======================================================

    // ∆ØU TI√äN 1: N·∫øu ƒëang b·ªã knockback, ƒë·ªÉ cho v·∫≠t l√Ω t·ª± do ho·∫°t ƒë·ªông.
    if (this.hasStatusEffect("knockback")) {
      // Kh√¥ng l√†m g√¨ c·∫£. ƒêi·ªÅu n√†y cho ph√©p v·∫≠n t·ªëc t·ª´ `applyKnockback()`
      // ƒë∆∞·ª£c duy tr√¨ cho ƒë·∫øn khi hi·ªáu ·ª©ng k·∫øt th√∫c.
      // Tr·ªçng l·ª±c v·∫´n s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng b·ªüi Arcade Physics.
    }
    // ∆ØU TI√äN 2: N·∫øu b·ªã n·∫Øm/b·∫ø V√Ä KH√îNG b·ªã knockback, h√£y b√°m theo ng∆∞·ªùi b·∫ø.
    else if (this.playerState.isGrabbed && this.serverTargetPosition) {
      // ----- LOGIC KHI B·ªä N·∫ÆM/B·∫æ (GI·ªÆ NGUY√äN) -----
      body.setAllowGravity(false);
      body.setVelocity(0, 0);
      InterpolationUtils.updateVelocity(this.sprite, this.serverTargetPosition);
      // ... (ph·∫ßn x·ª≠ l√Ω animation v√πng v·∫´y v√† struggle gi·ªØ nguy√™n) ...
      const isTryingToMove = inputState.left || inputState.right;
      if (isTryingToMove) {
        this.animationManager.playAnimation("walk");
        this.sprite.setFlipX(inputState.left);
      } else {
        this.animationManager.playAnimation(
          this.playerState.animState as AnimationState
        );
        this.sprite.setFlipX(this.playerState.flipX);
      }
      const isStruggling =
        inputState.left || inputState.right || inputState.jump;
      if (isStruggling && this.scene.time.now > this.struggleCooldown) {
        this.networkManager.room?.send("struggle");
        this.struggleCooldown = this.scene.time.now + 100;
      }
    }
    // ∆ØU TI√äN 3: N·∫øu kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát, x·ª≠ l√Ω di chuy·ªÉn b√¨nh th∆∞·ªùng.
    else {
      // ----- PH√ÇN NH√ÅNH ƒêI·ªÄU KHI·ªÇN: B∆†I vs B√åNH TH∆Ø·ªúNG -----
      if (!body.allowGravity) {
        body.setAllowGravity(true);
      }

      if (this.hasStatusEffect("swimming")) {
        // === LOGIC KHI ƒêANG B∆†I ===

        // 1. Di chuy·ªÉn ngang trong n∆∞·ªõc
        if (inputState.left) {
          body.setVelocityX(-this.config.physics.speed);
        } else if (inputState.right) {
          body.setVelocityX(this.config.physics.speed);
        } else {
          // Gi·∫£m t·ªëc d·∫ßn trong n∆∞·ªõc
          body.setVelocityX(body.velocity.x * 0.95);
        }

        // 2. B∆°i l√™n (thay cho nh·∫£y)
        if (inputState.jump) {
          body.setVelocityY(-this.config.physics.jumpPower);
          // C√≥ th·ªÉ th√™m √¢m thanh b∆°i ·ªü ƒë√¢y n·∫øu mu·ªën
        }

        // 3. C·∫≠p nh·∫≠t Animation (t√°i s·ª≠ d·ª•ng animation c√≥ s·∫µn)
        // N·∫øu c√≥ di chuy·ªÉn (ngang ho·∫∑c d·ªçc) -> d√πng animation 'walk' nh∆∞ ƒëang ƒë·∫°p n∆∞·ªõc
        if (Math.abs(body.velocity.x) > 10 || Math.abs(body.velocity.y) > 10) {
          this.animationManager.playAnimation("walk");
        } else {
          // N·∫øu ƒë·ª©ng y√™n -> d√πng animation 'fall' nh∆∞ ƒëang n·ªïi
          this.animationManager.playAnimation("fall");
        }
        // L·∫≠t sprite theo h∆∞·ªõng di chuy·ªÉn
        if (body.velocity.x > 0) this.animationManager.setFlipX(false);
        else if (body.velocity.x < 0) this.animationManager.setFlipX(true);
      } else {
        // === LOGIC DI CHUY·ªÇN B√åNH TH∆Ø·ªúNG (TR√äN C·∫†N/KH√îNG TRUNG) ===
        if (!this.hasStatusEffect("no_horizontal_move")) {
          if (inputState.left) {
            body.setVelocityX(-this.config.physics.speed);
          } else if (inputState.right) {
            body.setVelocityX(this.config.physics.speed);
          } else {
            body.setVelocityX(0);
          }
        }
        if (
          !this.hasStatusEffect("no_jump") &&
          inputState.jump &&
          body.blocked.down &&
          this.scene.time.now > this.jumpCooldown
        ) {
          body.setVelocityY(-this.config.physics.jumpPower);
          this.scene.sound.play("jump");
          this.jumpCooldown = this.scene.time.now + 300;
        }
      }
    }

    // C·∫≠p nh·∫≠t animation - ch·ªâ cho tr∆∞·ªùng h·ª£p kh√¥ng b∆°i (swimming t·ª± x·ª≠ l√Ω animation)
    if (!this.hasStatusEffect("swimming")) {
      this.animationManager.updateAnimation(body.velocity, body.blocked.down);
    }

    // ----- LOGIC CHUNG CHO C·∫¢ HAI TR·∫†NG TH√ÅI -----

    // 4. X·ª≠ l√Ω h√†nh ƒë·ªông "n·∫Øm" ho·∫∑c "b·ªè n·∫Øm"
    if (this.inputManager.isJustPressed("grab")) {
      if (this.playerState.isGrabbing) {
        // N·∫øu ƒëang n·∫Øm ai ƒë√≥ -> b·ªè n·∫Øm
        console.log(`[Client] Requesting to release grab`);
        this.networkManager.room?.send("requestGrab", {
          targetSessionId: this.playerState.isGrabbing,
        });
      } else {
        // N·∫øu kh√¥ng n·∫Øm ai -> t√¨m ng∆∞·ªùi ƒë·ªÉ n·∫Øm
        const closestRemotePlayer = this.scene.findClosestRemotePlayer(
          this.sprite.x,
          this.sprite.y,
          this.GRAB_DISTANCE_THRESHOLD
        );
        if (closestRemotePlayer) {
          console.log(
            `[Client] Requesting to grab ${closestRemotePlayer.sessionId}`
          );
          this.networkManager.room?.send("requestGrab", {
            targetSessionId: closestRemotePlayer.sessionId,
          });
        }
      }
    }

    // --- TH√äM LOGIC M·ªöI D∆Ø·ªöI ƒê√ÇY ---
    // X·ª≠ l√Ω h√†nh ƒë·ªông "b·∫ø" ho·∫∑c "n√©m"
    if (this.inputManager.isJustPressed("carry")) {
      // 'F' key
      // ======================== B·∫ÆT ƒê·∫¶U S·ª¨A ƒê·ªîI ========================

      // Case 1: N·∫øu ƒëang B·∫æ -> th·ª±c hi·ªán N√âM
      if (this.playerState.interactionState === "carry") {
        console.log("[Client] Requesting interaction change (throw)");
        this.networkManager.room?.send("requestInteractionChange");
      }
      // Case 2: N·∫øu ƒëang N·∫ÆM -> th·ª±c hi·ªán chuy·ªÉn sang B·∫æ
      else if (this.playerState.interactionState === "grab") {
        console.log("[Client] Requesting interaction change (grab -> carry)");
        // Server ƒë√£ bi·∫øt c√°ch x·ª≠ l√Ω message n√†y ƒë·ªÉ chuy·ªÉn t·ª´ grab -> carry
        this.networkManager.room?.send("requestInteractionChange");
      }
      // Case 3: N·∫øu kh√¥ng l√†m g√¨ -> th·ª±c hi·ªán B·∫æ TR·ª∞C TI·∫æP
      else {
        const closestRemotePlayer = this.scene.findClosestRemotePlayer(
          this.sprite.x,
          this.sprite.y,
          this.GRAB_DISTANCE_THRESHOLD
        );
        if (closestRemotePlayer) {
          console.log(
            `[Client] Requesting to DIRECTLY CARRY ${closestRemotePlayer.sessionId}`
          );
          // G·ª≠i message m·ªõi ƒë·ªÉ b·∫ø tr·ª±c ti·∫øp
          this.networkManager.room?.send("requestDirectCarry", {
            targetSessionId: closestRemotePlayer.sessionId,
          });
        }
      }

      // ======================== K·∫æT TH√öC S·ª¨A ƒê·ªîI ========================
    }

    // 5. G·ª≠i tr·∫°ng th√°i l√™n server (gi·ªØ nguy√™n)
    // QUAN TR·ªåNG: V·∫´n g·ª≠i update v·ªã tr√≠, v√¨ khi b·ªã n·∫Øm, server s·∫Ω ghi ƒë√® l√™n v·ªã tr√≠ n√†y.
    // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o khi ƒë∆∞·ª£c th·∫£ ra, v·ªã tr√≠ c·ªßa b·∫°n l√† ch√≠nh x√°c.
    const currentState = {
      x: Math.round(this.sprite.x),
      y: Math.round(this.sprite.y),
      animState: this.animationManager.getCurrentState(),
      flipX: this.sprite.flipX,
    };

    if (
      currentState.x !== this.lastSentState.x ||
      currentState.y !== this.lastSentState.y ||
      currentState.animState !== this.lastSentState.animState ||
      currentState.flipX !== this.lastSentState.flipX
    ) {
      this.networkManager.sendUpdate(currentState);
      this.lastSentState = currentState;
    }

    // 6. C·∫≠p nh·∫≠t camera v√† name tag (gi·ªØ nguy√™n)
    this.cameraManager.update();
    if (this.nameTag) {
      this.nameTag.x = this.sprite.x;
      this.nameTag.y = this.sprite.y - 60;
    }

    // === LOGIC M·ªöI: Reset c·ªù n∆∞·ªõc cho frame ti·∫øp theo ===
    // Ph·∫£i ƒë·∫∑t ·ªü cu·ªëi h√†m update
    this.isInWaterThisFrame = false;
  }

  public getSprite(): Phaser.Physics.Arcade.Sprite {
    return this.sprite;
  }

  public getPosition(): { x: number; y: number } {
    return { x: this.sprite.x, y: this.sprite.y };
  }

  /**
   * TH√äM M·ªöI: √Åp d·ª•ng m·ªôt l·ª±c t·ª´ b√™n ngo√†i (v√≠ d·ª•: gi√≥, d√≤ng n∆∞·ªõc).
   * L·ª±c n√†y s·∫Ω ƒë∆∞·ª£c c·ªông d·ªìn v√†o v·∫≠n t·ªëc hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i.
   * @param force - Vector l·ª±c { x, y }
   */
  public applyExternalForce(force: { x: number; y: number }): void {
    if (!this.sprite || !this.sprite.body) return;
    const body = this.sprite.body as Phaser.Physics.Arcade.Body;
    body.velocity.x += force.x;
    body.velocity.y += force.y;
  }

  /**
   * TH√äM M·ªöI: C·∫≠p nh·∫≠t h√†m respawn ƒë·ªÉ ƒë·∫£m b·∫£o reset tr·∫°ng th√°i khi ch·∫øt
   */
  public respawn(): void {
    this.isDead = false;

    // Reset l·∫°i c·∫£ hai c·ªù khi h·ªìi sinh
    this.isInFallZone = false;
    this.wasInFallZoneThisFrame = false;
    this.sprite.setAlpha(1); // Kh√¥i ph·ª•c alpha n·∫øu b·∫°n c√≥ thay ƒë·ªïi

    console.log("Player has been respawned.");
  }

  // === FALL-THROUGH SYSTEM METHODS ===
  /**
   * ƒê∆∞·ª£c g·ªçi b·ªüi overlap callback ƒë·ªÉ b√°o hi·ªáu r·∫±ng ng∆∞·ªùi ch∆°i ƒëang ·ªü trong v√πng r∆°i.
   */
  public markAsInFallZone(): void {
    this.isInFallZone = true;
    this.wasInFallZoneThisFrame = true; // C≈©ng b·∫≠t c·ªù c·∫£m bi·∫øn ƒë·ªÉ duy tr√¨ tr·∫°ng th√°i cho frame sau

    // T√πy ch·ªçn: Th√™m hi·ªáu ·ª©ng h√¨nh ·∫£nh ho·∫∑c √¢m thanh ·ªü ƒë√¢y
    // V√≠ d·ª•: l√†m m·ªù ng∆∞·ªùi ch∆°i ho·∫∑c ch∆°i √¢m thanh "cracking"
    // if (this.sprite.alpha === 1) {
    //   this.sprite.setAlpha(0.7);
    //   this.scene.sound.play('floor_crack', { volume: 0.5 });
    // }
  }

  /**
   * Ph∆∞∆°ng th·ª©c getter gi·ªù s·∫Ω ƒë·ªçc c·ªù b·ªÅn b·ªâ
   */
  public getIsFallingThrough(): boolean {
    return this.isInFallZone;
  }

  public destroy(): void {
    this.nameTag?.destroy(); // <-- TH√äM M·ªöI

    this.animationManager?.destroy();
    this.sprite?.destroy();
  }

  // === STATUS EFFECTS API ===
  public addStatusEffect(effect: IStatusEffect): void {
    if (this.activeEffects.has(effect.id)) return;
    this.activeEffects.set(effect.id, effect);
    effect.onApply(this);
  }

  public removeStatusEffect(effectId: string): void {
    const effect = this.activeEffects.get(effectId);
    if (!effect) return;
    effect.onRemove(this);
    this.activeEffects.delete(effectId);
  }

  public hasStatusEffect(effectId: string): boolean {
    return this.activeEffects.has(effectId);
  }
}

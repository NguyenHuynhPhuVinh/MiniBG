import { Room, getStateCallbacks } from "colyseus.js";
import {
  GameRoomState,
  Player as PlayerStateSchema,
} from "../core/types/GameRoomState";
import { BasePlatformerScene } from "../../scenes/platformer/BasePlatformerScene";
import { AnimationManager, AnimationState } from "./AnimationManager";
import { TextUtils } from "../../utils/TextUtils";

/**
 * üì° PLATFORMER NETWORK HANDLER - Chuy√™n gia X·ª≠ l√Ω Multiplayer
 *
 * L·ªõp n√†y c√¥ l·∫≠p to√†n b·ªô logic giao ti·∫øp v√† ƒë·ªìng b·ªô h√≥a v·ªõi server Colyseus.
 *
 * TR√ÅCH NHI·ªÜM:
 * - L·∫Øng nghe c√°c s·ª± ki·ªán onAdd, onRemove, onChange t·ª´ server.
 * - T·∫°o, qu·∫£n l√Ω v√† h·ªßy c√°c sprite c·ªßa ng∆∞·ªùi ch∆°i kh√°c (remote players).
 * - V√¥ hi·ªáu h√≥a v·∫≠t l√Ω cho remote players.
 * - √Åp d·ª•ng k·ªπ thu·∫≠t n·ªôi suy (interpolation) ƒë·ªÉ l√†m m∆∞·ª£t chuy·ªÉn ƒë·ªông c·ªßa remote players.
 * - Ra t√≠n hi·ªáu cho Scene khi c·∫ßn t·∫°o ng∆∞·ªùi ch∆°i ch√≠nh (local player).
 */
export class PlatformerNetworkHandler {
  private scene: BasePlatformerScene;
  private platformsLayer: Phaser.Tilemaps.TilemapLayer;
  private room!: Room<any>;

  // THAY ƒê·ªîI: Chuy·ªÉn remotePlayerSprites th√†nh m·ªôt Group
  private remotePlayersGroup!: Phaser.Physics.Arcade.Group;
  private remotePlayerSprites: Map<string, Phaser.Physics.Arcade.Sprite> =
    new Map();
  private remotePlayerAnims: Map<string, AnimationManager> = new Map();
  private remotePlayerNameTags: Map<string, Phaser.GameObjects.Text> =
    new Map(); // <-- TH√äM M·ªöI

  // üîß Track created players ƒë·ªÉ tr√°nh duplicates
  private createdPlayers: Set<string> = new Set();
  private isListenersSetup: boolean = false; // Th√™m c·ªù ƒë·ªÉ ƒë·∫£m b·∫£o listener ch·ªâ setup 1 l·∫ßn
  
  // <-- TH√äM THU·ªòC T√çNH CHO N·ªòI SUY TH·ªêNG NH·∫§T -->
  private LERP_FACTOR = 0.25; // D√πng chung LERP_FACTOR cho nh·∫•t qu√°n

  constructor(
    scene: BasePlatformerScene,
    platformsLayer: Phaser.Tilemaps.TilemapLayer
  ) {
    this.scene = scene;
    this.platformsLayer = platformsLayer;

    // KH·ªûI T·∫†O GROUP ·ªû ƒê√ÇY
    this.remotePlayersGroup = this.scene.physics.add.group();
  }

  // TH√äM M·ªöI: Getter ƒë·ªÉ BasePlatformerScene c√≥ th·ªÉ truy c·∫≠p group n√†y
  public getRemotePlayersGroup(): Phaser.Physics.Arcade.Group {
    return this.remotePlayersGroup;
  }

  /**
   * Kh·ªüi t·∫°o handler v·ªõi room instance v√† thi·∫øt l·∫≠p c√°c listeners.
   * @param room - Instance c·ªßa Colyseus Room.
   */
  public initialize(room: Room<any>): void {
    console.log(
      `üîß PlatformerNetworkHandler initializing with room:`,
      room.name
    );
    this.room = room;

    this.createdPlayers.clear();
    this.isListenersSetup = false; // Reset c·ªù

    // Ch·ªù state thay ƒë·ªïi l·∫ßn ƒë·∫ßu ti√™n ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô t·ª´ server
    room.onStateChange.once((state) => {
      console.log(`üîÑ Room state is now available/synced:`, state);
      this.setupStateListeners();
    });

    // Fallback n·∫øu state ƒë√£ c√≥ s·∫µn ngay l√∫c initialize
    if (room.state && room.state.players && room.state.players.size > 0) {
      console.log(`üîç Room state was already available on initialize.`);
      this.setupStateListeners();
    }
  }

  private setupStateListeners(): void {
    // D√πng c·ªù ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng setup listener 2 l·∫ßn
    if (this.isListenersSetup) return;
    this.isListenersSetup = true;

    if (!this.room || !this.room.state) {
      console.warn(`‚ö†Ô∏è Cannot setup listeners: room or state not available`);
      return;
    }

    const $: any = getStateCallbacks(this.room);

    // X√ìA ƒêO·∫†N FOREACH ƒê·ªÇ TR√ÅNH RACE CONDITION
    // L√Ω do: onAdd s·∫Ω ƒë∆∞·ª£c g·ªçi cho T·∫§T C·∫¢ players hi·ªán c√≥ khi state ƒë∆∞·ª£c sync l·∫ßn ƒë·∫ßu
    // v√† c·∫£ nh·ªØng players m·ªõi tham gia sau ƒë√≥
    /*
    if (this.room.state.players) {
      console.log(
        `üë• Processing ${this.room.state.players.size} existing players...`
      );
      this.room.state.players.forEach(this.addPlayerEntity);
    } else {
      console.log(`üë• No players collection available yet`);
    }
    */

    // CH·ªà GI·ªÆ L·∫†I C√ÅC LISTENER N√ÄY
    // onAdd s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω c·∫£ ng∆∞·ªùi ch∆°i c√≥ s·∫µn v√† ng∆∞·ªùi ch∆°i m·ªõi
    console.log(
      "‚úÖ Relying solely on onAdd/onRemove listeners for entity creation."
    );
    $(this.room.state).players.onAdd(this.addPlayerEntity);
    $(this.room.state).players.onRemove(this.removePlayerEntity);

    console.log(
      `‚úÖ PlatformerNetworkHandler state listeners setup successfully`
    );
  }

  /**
   * ƒê∆∞·ª£c g·ªçi m·ªói frame t·ª´ scene ƒë·ªÉ n·ªôi suy chuy·ªÉn ƒë·ªông c·ªßa ng∆∞·ªùi ch∆°i kh√°c.
   */
  public update(): void {
    this.remotePlayerSprites.forEach((sprite, sessionId) => {
      const target_x = sprite.getData('target_x');
      const target_y = sprite.getData('target_y');
      const isGrabbed = sprite.getData('isGrabbed') === true;

      if (typeof target_x !== 'number' || typeof target_y !== 'number') {
        return;
      }

      if (isGrabbed) {
        // <-- LOGIC N·ªòI SUY CHO REMOTE PLAYER B·ªä N·∫ÆM -->
        // V√¥ hi·ªáu h√≥a v·∫≠t l√Ω nh∆∞ng v·∫´n gi·ªØ n·ªôi suy m∆∞·ª£t m√†
        const body = sprite.body as Phaser.Physics.Arcade.Body;
        body.setVelocity(0, 0); // D·ª´ng m·ªçi chuy·ªÉn ƒë·ªông v·∫≠t l√Ω
        body.setAllowGravity(false); // T·∫Øt tr·ªçng l·ª±c
        body.setImmovable(true); // Kh√¥ng b·ªã ƒë·∫©y b·ªüi v·∫≠t kh√°c
        
        // V·∫´n d√πng n·ªôi suy tuy·∫øn t√≠nh ƒë·ªÉ chuy·ªÉn ƒë·ªông m∆∞·ª£t
        sprite.x = Phaser.Math.Linear(sprite.x, target_x, this.LERP_FACTOR);
        sprite.y = Phaser.Math.Linear(sprite.y, target_y, this.LERP_FACTOR);
      } else {
        // <-- LOGIC TH√çCH ·ª®NG CHO REMOTE PLAYER T·ª∞ DO -->
        // Ki·ªÉm tra v·ªã tr√≠ target c√≥ h·ª£p l·ªá kh√¥ng
        const worldHeight = this.scene.physics.world.bounds.height;
        const worldWidth = this.scene.physics.world.bounds.width;

        // N·∫øu target n·∫±m ngo√†i world bounds ho·∫∑c d∆∞·ªõi ƒë√°y -> kh√¥ng n·ªôi suy
        if (
          target_x < 0 ||
          target_x > worldWidth ||
          target_y < 0 ||
          target_y > worldHeight
        ) {
          console.warn(
            `[NetworkHandler] Invalid target position for ${sessionId}: (${target_x}, ${target_y})`
          );
          return;
        }

        // T√≠nh kho·∫£ng c√°ch ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô n·ªôi suy
        const distanceX = Math.abs(target_x - sprite.x);
        const distanceY = Math.abs(target_y - sprite.y);
        const totalDistance = Math.sqrt(
          distanceX * distanceX + distanceY * distanceY
        );

        // ƒêi·ªÅu ch·ªânh factor d·ª±a tr√™n kho·∫£ng c√°ch
        if (totalDistance > 200) {
          // Kho·∫£ng c√°ch qu√° l·ªõn -> teleport ngay l·∫≠p t·ª©c (c√≥ th·ªÉ do lag ho·∫∑c respawn)
          sprite.x = target_x;
          sprite.y = target_y;
        } else {
          // N·ªôi suy v·ªõi factor th√≠ch ·ª©ng
          let factor = 0.2; // Factor m·∫∑c ƒë·ªãnh cho chuy·ªÉn ƒë·ªông ch·∫≠m

          if (totalDistance > 100) {
            // Kho·∫£ng c√°ch l·ªõn (nh·∫£y xa) -> n·ªôi suy nhanh
            factor = 0.8;
          } else if (totalDistance > 50) {
            // Kho·∫£ng c√°ch trung b√¨nh (nh·∫£y) -> n·ªôi suy v·ª´a
            factor = 0.5;
          } else if (totalDistance > 20) {
            // Kho·∫£ng c√°ch nh·ªè (di chuy·ªÉn nhanh) -> n·ªôi suy b√¨nh th∆∞·ªùng
            factor = 0.3;
          }
          // Kho·∫£ng c√°ch r·∫•t nh·ªè (< 20) -> gi·ªØ factor m·∫∑c ƒë·ªãnh 0.2

          sprite.x = Phaser.Math.Linear(sprite.x, target_x, factor);
          sprite.y = Phaser.Math.Linear(sprite.y, target_y, factor);
        }
      }
      
      // C·∫≠p nh·∫≠t v·ªã tr√≠ name tag
      const nameTag = this.remotePlayerNameTags.get(sessionId);
      if (nameTag) {
        nameTag.x = sprite.x;
        nameTag.y = sprite.y - 60;
      }
    });
  }

  // TH√äM M·ªöI: C·∫≠p nh·∫≠t debug hitbox cho remote player

  /**
   * üñºÔ∏è SETUP REMOTE PLAYER FRAMES - Setup frames cho remote players
   */
  private setupRemotePlayerFrames(): void {
    const texture = this.scene.textures.get("spritesheet-characters-default");
    const characterData = this.scene.getCharacterData();

    // Duy·ªát qua t·∫•t c·∫£ animation states v√† add frames
    Object.entries(characterData).forEach(([, frames]) => {
      frames.forEach((frame: any, index: number) => {
        const frameKey = `char_${frame.x}_${frame.y}_${index}`;

        // Ch·ªâ add frame n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!texture.has(frameKey)) {
          texture.add(frameKey, 0, frame.x, frame.y, frame.width, frame.height);
        }
      });
    });
  }

  /**
   * X·ª≠ l√Ω khi c√≥ m·ªôt ng∆∞·ªùi ch∆°i m·ªõi v√†o ph√≤ng (ho·∫∑c khi m√¨nh m·ªõi v√†o).
   */
  private addPlayerEntity = (
    playerState: PlayerStateSchema,
    sessionId: string
  ) => {
    console.log(
      `üé≠ addPlayerEntity called for sessionId: ${sessionId}, isMe: ${
        sessionId === this.room.sessionId
      }`
    );
    console.log(`üé≠ Player state:`, {
      x: playerState.x,
      y: playerState.y,
      animState: playerState.animState,
    });

    // üîß Check n·∫øu player ƒë√£ ƒë∆∞·ª£c t·∫°o
    if (this.createdPlayers.has(sessionId)) {
      console.log(`‚ö†Ô∏è Player ${sessionId} already created, skipping...`);
      return;
    }

    const isMe = sessionId === this.room.sessionId;

    if (isMe) {
      // N·∫øu l√† m√¨nh, g·ªçi method t·∫°o nh√¢n v·∫≠t ch√≠nh c·ªßa Scene
      console.log(`üë§ Creating main player for session: ${sessionId}`);
      this.createdPlayers.add(sessionId); // Mark as created
      this.scene.createMainPlayer(playerState);
    } else {
      // N·∫øu l√† ng∆∞·ªùi ch∆°i kh√°c, t·∫°o m·ªôt sprite "ma" ƒë·ªÉ hi·ªÉn th·ªã
      console.log(`üëª Creating remote player sprite for ${sessionId}`);
      this.createdPlayers.add(sessionId); // Mark as created
      this.setupRemotePlayerFrames();

      // L·∫•y frame ƒë·∫ßu ti√™n c·ªßa idle animation
      const characterData = this.scene.getCharacterData();
      const firstFrame = characterData.idle[0];
      const frameKey = `char_${firstFrame.x}_${firstFrame.y}_0`;

      const entity = this.scene.physics.add.sprite(
        playerState.x,
        playerState.y,
        "spritesheet-characters-default",
        frameKey
      );

      // X√ìA D√íNG N√ÄY ƒê·ªÇ B·ªé M√ÄU XANH
      // entity.setDisplaySize(96, 96).setTint(0x00ff00);

      // THAY B·∫∞NG D√íNG N√ÄY
      entity.setDisplaySize(96, 96);

      // TH√äM M·ªöI: T·∫°o Name Tag v·ªõi TextUtils
      const nameTag = TextUtils.createPlayerNameTag(
        this.scene,
        playerState.x,
        playerState.y - 60,
        playerState.username,
        false // isLocalPlayer = false
      );

      // Th√™m hi·ªáu ·ª©ng fade in cho name tag
      TextUtils.fadeInText(nameTag, 300);

      this.remotePlayerNameTags.set(sessionId, nameTag); // L∆∞u l·∫°i name tag

      // Va ch·∫°m v·ªõi n·ªÅn ƒë·∫•t nh∆∞ng kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi tr·ªçng l·ª±c
      this.scene.physics.add.collider(entity, this.platformsLayer);
      // Thi·∫øt l·∫≠p v·∫≠t l√Ω ƒë∆°n gi·∫£n: kh√¥ng b·ªã tr·ªçng l·ª±c, kh√¥ng b·ªã ƒë·∫©y, nh∆∞ b·ª©c t∆∞·ªùng
      const body = entity.body as Phaser.Physics.Arcade.Body;
      body.setAllowGravity(false);
      body.setImmovable(true);
      body.pushable = false;
      body.setSize(48, 80);
      body.setOffset(40, 48);
      this.remotePlayersGroup.add(entity);

      this.remotePlayerSprites.set(sessionId, entity);
      this.remotePlayerAnims.set(
        sessionId,
        new AnimationManager(this.scene, entity, characterData)
      );

      // G·∫Øn d·ªØ li·ªáu m·ª•c ti√™u ban ƒë·∫ßu
      entity.setData("target_x", playerState.x);
      entity.setData("target_y", playerState.y);

      // L·∫Øng nghe thay ƒë·ªïi tr·∫°ng th√°i c·ªßa ng∆∞·ªùi ch∆°i n√†y t·ª´ server
      const $: any = getStateCallbacks(this.room!);
      ($ as any)(playerState).onChange(() => {
        // C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU ƒê·ªÇ H√ÄM UPDATE() S·ª¨ D·ª§NG
        entity.setData('target_x', playerState.x);
        entity.setData('target_y', playerState.y);
        entity.setData('isGrabbed', playerState.isGrabbed); // <-- Th√™m d√≤ng n√†y

        // C·∫≠p nh·∫≠t username n·∫øu n√≥ thay ƒë·ªïi (hi·∫øm nh∆∞ng n√™n c√≥)
        const nameTag = this.remotePlayerNameTags.get(sessionId);
        if (nameTag) {
          nameTag.setText(playerState.username);
        }

        const animManager = this.remotePlayerAnims.get(sessionId);
        animManager?.playAnimation(playerState.animState as AnimationState);
        entity.setFlipX(playerState.flipX);
      });
    }
  };

  /**
   * X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi ch∆°i r·ªùi ph√≤ng.
   */
  private removePlayerEntity = (
    playerState: PlayerStateSchema,
    sessionId: string
  ) => {
    const entity = this.remotePlayerSprites.get(sessionId);
    if (entity) {
      // THAY ƒê·ªîI: X√≥a kh·ªèi group
      this.remotePlayersGroup.remove(entity, true, true);
      this.remotePlayerSprites.delete(sessionId);
    }

    const animManager = this.remotePlayerAnims.get(sessionId);
    if (animManager) {
      animManager.destroy();
      this.remotePlayerAnims.delete(sessionId);
    }

    // TH√äM M·ªöI: Destroy name tag
    const nameTag = this.remotePlayerNameTags.get(sessionId);
    if (nameTag) {
      nameTag.destroy();
      this.remotePlayerNameTags.delete(sessionId);
    }

    // TH√äM M·ªöI: Destroy debug hitbox

    console.log(`Removed remote player sprite and name tag for ${sessionId}`);
  };

  // <-- TH√äM C√ÅC PH∆Ø∆†NG TH·ª®C HELPER M·ªöI CHO T√çNH NƒÇNG N·∫ÆM V√Ä THO√ÅT -->

  /**
   * L·∫•y sprite c·ªßa m·ªôt ng∆∞·ªùi ch∆°i t·ª´ xa.
   */
  public getRemoteSprite(
    sessionId: string
  ): Phaser.Physics.Arcade.Sprite | undefined {
    return this.remotePlayerSprites.get(sessionId);
  }

  /**
   * T√¨m ng∆∞·ªùi ch∆°i t·ª´ xa g·∫ßn nh·∫•t.
   */
  public findClosestRemotePlayer(
    x: number,
    y: number,
    maxDistance: number
  ): { sessionId: string; distance: number } | null {
    let closestPlayer: { sessionId: string; distance: number } | null = null;
    let minDistance = maxDistance;

    this.remotePlayerSprites.forEach((sprite, sessionId) => {
      const distance = Phaser.Math.Distance.Between(x, y, sprite.x, sprite.y);
      if (distance < minDistance) {
        minDistance = distance;
        closestPlayer = { sessionId, distance };
      }
    });

    return closestPlayer;
  }

  /**
   * D·ªçn d·∫πp t√†i nguy√™n khi scene k·∫øt th√∫c.
   */
  public cleanup(): void {
    // Kh√¥ng c·∫ßn cleanup listeners v√¨ ch√∫ng ta kh√¥ng tr·ª±c ti·∫øp g√°n v√†o room.state.players
    // Colyseus t·ª± ƒë·ªông cleanup khi room b·ªã destroy

    // THAY ƒê·ªîI: D·ªçn d·∫πp group
    this.remotePlayersGroup.clear(true, true);
    this.remotePlayerSprites.clear();
    this.remotePlayerAnims.clear();
    this.remotePlayerNameTags.clear(); // <-- TH√äM M·ªöI

    this.createdPlayers.clear(); // üîß Clear tracking
    console.log("üóëÔ∏è PlatformerNetworkHandler cleaned up.");
  }
}

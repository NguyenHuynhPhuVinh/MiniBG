// frontend/phaser/classes/platformer/effects/SwimmingEffect.ts
import type { Player } from "../Player";
import { IStatusEffect } from "./IStatusEffect";

/**
 * Hi·ªáu ·ª©ng n√†y thay ƒë·ªïi v·∫≠t l√Ω c·ªßa ng∆∞·ªùi ch∆°i ƒë·ªÉ m√¥ ph·ªèng vi·ªác b∆°i.
 * N√≥ kh√¥ng c√≥ th·ªùi gian v√† s·∫Ω ƒë∆∞·ª£c g·ª° b·ªè th·ªß c√¥ng khi ng∆∞·ªùi ch∆°i r·ªùi kh·ªèi n∆∞·ªõc.
 */
export class SwimmingEffect implements IStatusEffect {
  readonly id = "swimming";
  isFinished = false; // S·∫Ω kh√¥ng bao gi·ªù t·ª± k·∫øt th√∫c

  private originalPhysics: { gravity: number, speed: number, jumpPower: number } | null = null;

  onApply(player: Player): void {
    console.log("üåä Player entered water. Applying swimming physics.");
    const playerConfig = (player as any).config.physics;
    const spriteBody = player.getSprite().body as Phaser.Physics.Arcade.Body;

    // L∆∞u l·∫°i v·∫≠t l√Ω ban ƒë·∫ßu
    this.originalPhysics = {
      gravity: spriteBody.gravity.y,
      speed: playerConfig.speed,
      jumpPower: playerConfig.jumpPower,
    };

    // √Åp d·ª•ng v·∫≠t l√Ω b∆°i
    spriteBody.setGravityY(150); // Tr·ªçng l·ª±c r·∫•t y·∫øu, l√†m ng∆∞·ªùi ch∆°i ch√¨m t·ª´ t·ª´
    playerConfig.speed *= 0.7; // Di chuy·ªÉn trong n∆∞·ªõc ch·∫≠m h∆°n
    playerConfig.jumpPower = 250; // "Nh·∫£y" trong n∆∞·ªõc l√† ƒë·ªÉ b∆°i l√™n
  }

  update(_deltaTime: number, _player: Player): void {
    // Kh√¥ng c·∫ßn l√†m g√¨ m·ªói frame, logic ch√≠nh n·∫±m trong Player.update()
  }

  onRemove(player: Player): void {
    console.log("üèä Player exited water. Restoring normal physics.");
    if (this.originalPhysics) {
      const playerConfig = (player as any).config.physics;
      const spriteBody = player.getSprite().body as Phaser.Physics.Arcade.Body;

      // Kh√¥i ph·ª•c v·∫≠t l√Ω ban ƒë·∫ßu
      spriteBody.setGravityY(this.originalPhysics.gravity);
      playerConfig.speed = this.originalPhysics.speed;
      playerConfig.jumpPower = this.originalPhysics.jumpPower;
    }
  }
}
